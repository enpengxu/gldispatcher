#ifndef POINTER_C_GENERATED_HEADER_OPENGL_H
#define POINTER_C_GENERATED_HEADER_OPENGL_H

#if defined(__glew_h__) || defined(__GLEW_H__)
#error Attempt to include auto-generated header after including glew.h
#endif
#if defined(__gl_h_) || defined(__GL_H__)
#error Attempt to include auto-generated header after including gl.h
#endif
#if defined(__glext_h_) || defined(__GLEXT_H_)
#error Attempt to include auto-generated header after including glext.h
#endif
#if defined(__gltypes_h_)
#error Attempt to include auto-generated header after gltypes.h
#endif
#if defined(__gl_ATI_h_)
#error Attempt to include auto-generated header after including glATI.h
#endif

#define __glew_h__
#define __GLEW_H__
#define __gl_h_
#define __GL_H__
#define __glext_h_
#define __GLEXT_H_
#define __gltypes_h_
#define __gl_ATI_h_

#ifndef APIENTRY
	#if defined(__MINGW32__)
		#ifndef WIN32_LEAN_AND_MEAN
			#define WIN32_LEAN_AND_MEAN 1
		#endif
		#ifndef NOMINMAX
			#define NOMINMAX
		#endif
		#include <windows.h>
	#elif (_MSC_VER >= 800) || defined(_STDCALL_SUPPORTED) || defined(__BORLANDC__)
		#ifndef WIN32_LEAN_AND_MEAN
			#define WIN32_LEAN_AND_MEAN 1
		#endif
		#ifndef NOMINMAX
			#define NOMINMAX
		#endif
		#include <windows.h>
	#else
		#define APIENTRY
	#endif
#endif /*APIENTRY*/

#ifndef CODEGEN_FUNCPTR
	#define CODEGEN_REMOVE_FUNCPTR
	#if defined(_WIN32)
		#define CODEGEN_FUNCPTR APIENTRY
	#else
		#define CODEGEN_FUNCPTR
	#endif
#endif /*CODEGEN_FUNCPTR*/

#ifndef GLAPI
	#define GLAPI extern
#endif


#ifndef GL_LOAD_GEN_BASIC_OPENGL_TYPEDEFS
#define GL_LOAD_GEN_BASIC_OPENGL_TYPEDEFS


#endif /*GL_LOAD_GEN_BASIC_OPENGL_TYPEDEFS*/


#include <stddef.h>
#ifndef GLEXT_64_TYPES_DEFINED
/* This code block is duplicated in glxext.h, so must be protected */
#define GLEXT_64_TYPES_DEFINED
/* Define int32_t, int64_t, and uint64_t types for UST/MSC */
/* (as used in the GL_EXT_timer_query extension). */
#if defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
#include <inttypes.h>
#elif defined(__sun__) || defined(__digital__)
#include <inttypes.h>
#if defined(__STDC__)
#if defined(__arch64__) || defined(_LP64)
typedef long int int64_t;
typedef unsigned long int uint64_t;
#else
typedef long long int int64_t;
typedef unsigned long long int uint64_t;
#endif /* __arch64__ */
#endif /* __STDC__ */
#elif defined( __VMS ) || defined(__sgi)
#include <inttypes.h>
#elif defined(__SCO__) || defined(__USLC__)
#include <stdint.h>
#elif defined(__UNIXOS2__) || defined(__SOL64__)
typedef long int int32_t;
typedef long long int int64_t;
typedef unsigned long long int uint64_t;
#elif defined(_WIN32) && defined(__GNUC__)
#include <stdint.h>
#elif defined(_WIN32)
typedef __int32 int32_t;
typedef __int64 int64_t;
typedef unsigned __int64 uint64_t;
#else
/* Fallback if nothing above works */
#include <inttypes.h>
#endif
#endif
	typedef unsigned int GLenum;
	typedef unsigned char GLboolean;
	typedef unsigned int GLbitfield;
	typedef void GLvoid;
	typedef signed char GLbyte;
	typedef short GLshort;
	typedef int GLint;
	typedef unsigned char GLubyte;
	typedef unsigned short GLushort;
	typedef unsigned int GLuint;
	typedef int GLsizei;
	typedef float GLfloat;
	typedef float GLclampf;
	typedef double GLdouble;
	typedef double GLclampd;
	typedef char GLchar;
	typedef char GLcharARB;
	#ifdef __APPLE__
typedef void *GLhandleARB;
#else
typedef unsigned int GLhandleARB;
#endif
		typedef unsigned short GLhalfARB;
		typedef unsigned short GLhalf;
		typedef GLint GLfixed;
		typedef ptrdiff_t GLintptr;
		typedef ptrdiff_t GLsizeiptr;
		typedef int64_t GLint64;
		typedef uint64_t GLuint64;
		typedef ptrdiff_t GLintptrARB;
		typedef ptrdiff_t GLsizeiptrARB;
		typedef int64_t GLint64EXT;
		typedef uint64_t GLuint64EXT;
		typedef struct __GLsync *GLsync;
		struct _cl_context;
		struct _cl_event;
		typedef void (APIENTRY *GLDEBUGPROC)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
		typedef void (APIENTRY *GLDEBUGPROCARB)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
		typedef void (APIENTRY *GLDEBUGPROCAMD)(GLuint id,GLenum category,GLenum severity,GLsizei length,const GLchar *message,void *userParam);
		typedef unsigned short GLhalfNV;
		typedef GLintptr GLvdpauSurfaceNV;

#ifdef __cplusplus
extern "C" {
#endif /*__cplusplus*/

#define GL_2D 0x0600
#define GL_2_BYTES 0x1407
#define GL_3D 0x0601
#define GL_3D_COLOR 0x0602
#define GL_3D_COLOR_TEXTURE 0x0603
#define GL_3_BYTES 0x1408
#define GL_4D_COLOR_TEXTURE 0x0604
#define GL_4_BYTES 0x1409
#define GL_ACCUM 0x0100
#define GL_ACCUM_ALPHA_BITS 0x0D5B
#define GL_ACCUM_BLUE_BITS 0x0D5A
#define GL_ACCUM_BUFFER_BIT 0x00000200
#define GL_ACCUM_CLEAR_VALUE 0x0B80
#define GL_ACCUM_GREEN_BITS 0x0D59
#define GL_ACCUM_RED_BITS 0x0D58
#define GL_ADD 0x0104
#define GL_ALL_ATTRIB_BITS 0xFFFFFFFF
#define GL_ALPHA 0x1906
#define GL_ALPHA12 0x803D
#define GL_ALPHA16 0x803E
#define GL_ALPHA4 0x803B
#define GL_ALPHA8 0x803C
#define GL_ALPHA_BIAS 0x0D1D
#define GL_ALPHA_BITS 0x0D55
#define GL_ALPHA_SCALE 0x0D1C
#define GL_ALPHA_TEST 0x0BC0
#define GL_ALPHA_TEST_FUNC 0x0BC1
#define GL_ALPHA_TEST_REF 0x0BC2
#define GL_ALWAYS 0x0207
#define GL_AMBIENT 0x1200
#define GL_AMBIENT_AND_DIFFUSE 0x1602
#define GL_AND 0x1501
#define GL_AND_INVERTED 0x1504
#define GL_AND_REVERSE 0x1502
#define GL_ATTRIB_STACK_DEPTH 0x0BB0
#define GL_AUTO_NORMAL 0x0D80
#define GL_AUX0 0x0409
#define GL_AUX1 0x040A
#define GL_AUX2 0x040B
#define GL_AUX3 0x040C
#define GL_AUX_BUFFERS 0x0C00
#define GL_BACK 0x0405
#define GL_BACK_LEFT 0x0402
#define GL_BACK_RIGHT 0x0403
#define GL_BITMAP 0x1A00
#define GL_BITMAP_TOKEN 0x0704
#define GL_BLEND 0x0BE2
#define GL_BLEND_DST 0x0BE0
#define GL_BLEND_SRC 0x0BE1
#define GL_BLUE 0x1905
#define GL_BLUE_BIAS 0x0D1B
#define GL_BLUE_BITS 0x0D54
#define GL_BLUE_SCALE 0x0D1A
#define GL_BYTE 0x1400
#define GL_C3F_V3F 0x2A24
#define GL_C4F_N3F_V3F 0x2A26
#define GL_C4UB_V2F 0x2A22
#define GL_C4UB_V3F 0x2A23
#define GL_CCW 0x0901
#define GL_CLAMP 0x2900
#define GL_CLEAR 0x1500
#define GL_CLIENT_ALL_ATTRIB_BITS 0xFFFFFFFF
#define GL_CLIENT_ATTRIB_STACK_DEPTH 0x0BB1
#define GL_CLIENT_PIXEL_STORE_BIT 0x00000001
#define GL_CLIENT_VERTEX_ARRAY_BIT 0x00000002
#define GL_CLIP_PLANE0 0x3000
#define GL_CLIP_PLANE1 0x3001
#define GL_CLIP_PLANE2 0x3002
#define GL_CLIP_PLANE3 0x3003
#define GL_CLIP_PLANE4 0x3004
#define GL_CLIP_PLANE5 0x3005
#define GL_COEFF 0x0A00
#define GL_COLOR 0x1800
#define GL_COLOR_ARRAY 0x8076
#define GL_COLOR_ARRAY_POINTER 0x8090
#define GL_COLOR_ARRAY_SIZE 0x8081
#define GL_COLOR_ARRAY_STRIDE 0x8083
#define GL_COLOR_ARRAY_TYPE 0x8082
#define GL_COLOR_BUFFER_BIT 0x00004000
#define GL_COLOR_CLEAR_VALUE 0x0C22
#define GL_COLOR_INDEX 0x1900
#define GL_COLOR_INDEXES 0x1603
#define GL_COLOR_LOGIC_OP 0x0BF2
#define GL_COLOR_MATERIAL 0x0B57
#define GL_COLOR_MATERIAL_FACE 0x0B55
#define GL_COLOR_MATERIAL_PARAMETER 0x0B56
#define GL_COLOR_WRITEMASK 0x0C23
#define GL_COMPILE 0x1300
#define GL_COMPILE_AND_EXECUTE 0x1301
#define GL_CONSTANT_ATTENUATION 0x1207
#define GL_COPY 0x1503
#define GL_COPY_INVERTED 0x150C
#define GL_COPY_PIXEL_TOKEN 0x0706
#define GL_CULL_FACE 0x0B44
#define GL_CULL_FACE_MODE 0x0B45
#define GL_CURRENT_BIT 0x00000001
#define GL_CURRENT_COLOR 0x0B00
#define GL_CURRENT_INDEX 0x0B01
#define GL_CURRENT_NORMAL 0x0B02
#define GL_CURRENT_RASTER_COLOR 0x0B04
#define GL_CURRENT_RASTER_DISTANCE 0x0B09
#define GL_CURRENT_RASTER_INDEX 0x0B05
#define GL_CURRENT_RASTER_POSITION 0x0B07
#define GL_CURRENT_RASTER_POSITION_VALID 0x0B08
#define GL_CURRENT_RASTER_TEXTURE_COORDS 0x0B06
#define GL_CURRENT_TEXTURE_COORDS 0x0B03
#define GL_CW 0x0900
#define GL_DECAL 0x2101
#define GL_DECR 0x1E03
#define GL_DEPTH 0x1801
#define GL_DEPTH_BIAS 0x0D1F
#define GL_DEPTH_BITS 0x0D56
#define GL_DEPTH_BUFFER_BIT 0x00000100
#define GL_DEPTH_CLEAR_VALUE 0x0B73
#define GL_DEPTH_COMPONENT 0x1902
#define GL_DEPTH_FUNC 0x0B74
#define GL_DEPTH_RANGE 0x0B70
#define GL_DEPTH_SCALE 0x0D1E
#define GL_DEPTH_TEST 0x0B71
#define GL_DEPTH_WRITEMASK 0x0B72
#define GL_DIFFUSE 0x1201
#define GL_DITHER 0x0BD0
#define GL_DOMAIN 0x0A02
#define GL_DONT_CARE 0x1100
#define GL_DOUBLE 0x140A
#define GL_DOUBLEBUFFER 0x0C32
#define GL_DRAW_BUFFER 0x0C01
#define GL_DRAW_PIXEL_TOKEN 0x0705
#define GL_DST_ALPHA 0x0304
#define GL_DST_COLOR 0x0306
#define GL_EDGE_FLAG 0x0B43
#define GL_EDGE_FLAG_ARRAY 0x8079
#define GL_EDGE_FLAG_ARRAY_POINTER 0x8093
#define GL_EDGE_FLAG_ARRAY_STRIDE 0x808C
#define GL_EMISSION 0x1600
#define GL_ENABLE_BIT 0x00002000
#define GL_EQUAL 0x0202
#define GL_EQUIV 0x1509
#define GL_EVAL_BIT 0x00010000
#define GL_EXP 0x0800
#define GL_EXP2 0x0801
#define GL_EXTENSIONS 0x1F03
#define GL_EYE_LINEAR 0x2400
#define GL_EYE_PLANE 0x2502
#define GL_FALSE 0
#define GL_FASTEST 0x1101
#define GL_FEEDBACK 0x1C01
#define GL_FEEDBACK_BUFFER_POINTER 0x0DF0
#define GL_FEEDBACK_BUFFER_SIZE 0x0DF1
#define GL_FEEDBACK_BUFFER_TYPE 0x0DF2
#define GL_FILL 0x1B02
#define GL_FLAT 0x1D00
#define GL_FLOAT 0x1406
#define GL_FOG 0x0B60
#define GL_FOG_BIT 0x00000080
#define GL_FOG_COLOR 0x0B66
#define GL_FOG_DENSITY 0x0B62
#define GL_FOG_END 0x0B64
#define GL_FOG_HINT 0x0C54
#define GL_FOG_INDEX 0x0B61
#define GL_FOG_MODE 0x0B65
#define GL_FOG_START 0x0B63
#define GL_FRONT 0x0404
#define GL_FRONT_AND_BACK 0x0408
#define GL_FRONT_FACE 0x0B46
#define GL_FRONT_LEFT 0x0400
#define GL_FRONT_RIGHT 0x0401
#define GL_GEQUAL 0x0206
#define GL_GREATER 0x0204
#define GL_GREEN 0x1904
#define GL_GREEN_BIAS 0x0D19
#define GL_GREEN_BITS 0x0D53
#define GL_GREEN_SCALE 0x0D18
#define GL_HINT_BIT 0x00008000
#define GL_INCR 0x1E02
#define GL_INDEX_ARRAY 0x8077
#define GL_INDEX_ARRAY_POINTER 0x8091
#define GL_INDEX_ARRAY_STRIDE 0x8086
#define GL_INDEX_ARRAY_TYPE 0x8085
#define GL_INDEX_BITS 0x0D51
#define GL_INDEX_CLEAR_VALUE 0x0C20
#define GL_INDEX_LOGIC_OP 0x0BF1
#define GL_INDEX_MODE 0x0C30
#define GL_INDEX_OFFSET 0x0D13
#define GL_INDEX_SHIFT 0x0D12
#define GL_INDEX_WRITEMASK 0x0C21
#define GL_INT 0x1404
#define GL_INTENSITY 0x8049
#define GL_INTENSITY12 0x804C
#define GL_INTENSITY16 0x804D
#define GL_INTENSITY4 0x804A
#define GL_INTENSITY8 0x804B
#define GL_INVALID_ENUM 0x0500
#define GL_INVALID_OPERATION 0x0502
#define GL_INVALID_VALUE 0x0501
#define GL_INVERT 0x150A
#define GL_KEEP 0x1E00
#define GL_LEFT 0x0406
#define GL_LEQUAL 0x0203
#define GL_LESS 0x0201
#define GL_LIGHT0 0x4000
#define GL_LIGHT1 0x4001
#define GL_LIGHT2 0x4002
#define GL_LIGHT3 0x4003
#define GL_LIGHT4 0x4004
#define GL_LIGHT5 0x4005
#define GL_LIGHT6 0x4006
#define GL_LIGHT7 0x4007
#define GL_LIGHTING 0x0B50
#define GL_LIGHTING_BIT 0x00000040
#define GL_LIGHT_MODEL_AMBIENT 0x0B53
#define GL_LIGHT_MODEL_LOCAL_VIEWER 0x0B51
#define GL_LIGHT_MODEL_TWO_SIDE 0x0B52
#define GL_LINE 0x1B01
#define GL_LINEAR 0x2601
#define GL_LINEAR_ATTENUATION 0x1208
#define GL_LINEAR_MIPMAP_LINEAR 0x2703
#define GL_LINEAR_MIPMAP_NEAREST 0x2701
#define GL_LINES 0x0001
#define GL_LINE_BIT 0x00000004
#define GL_LINE_LOOP 0x0002
#define GL_LINE_RESET_TOKEN 0x0707
#define GL_LINE_SMOOTH 0x0B20
#define GL_LINE_SMOOTH_HINT 0x0C52
#define GL_LINE_STIPPLE 0x0B24
#define GL_LINE_STIPPLE_PATTERN 0x0B25
#define GL_LINE_STIPPLE_REPEAT 0x0B26
#define GL_LINE_STRIP 0x0003
#define GL_LINE_TOKEN 0x0702
#define GL_LINE_WIDTH 0x0B21
#define GL_LINE_WIDTH_GRANULARITY 0x0B23
#define GL_LINE_WIDTH_RANGE 0x0B22
#define GL_LIST_BASE 0x0B32
#define GL_LIST_BIT 0x00020000
#define GL_LIST_INDEX 0x0B33
#define GL_LIST_MODE 0x0B30
#define GL_LOAD 0x0101
#define GL_LOGIC_OP 0x0BF1
#define GL_LOGIC_OP_MODE 0x0BF0
#define GL_LUMINANCE 0x1909
#define GL_LUMINANCE12 0x8041
#define GL_LUMINANCE12_ALPHA12 0x8047
#define GL_LUMINANCE12_ALPHA4 0x8046
#define GL_LUMINANCE16 0x8042
#define GL_LUMINANCE16_ALPHA16 0x8048
#define GL_LUMINANCE4 0x803F
#define GL_LUMINANCE4_ALPHA4 0x8043
#define GL_LUMINANCE6_ALPHA2 0x8044
#define GL_LUMINANCE8 0x8040
#define GL_LUMINANCE8_ALPHA8 0x8045
#define GL_LUMINANCE_ALPHA 0x190A
#define GL_MAP1_COLOR_4 0x0D90
#define GL_MAP1_GRID_DOMAIN 0x0DD0
#define GL_MAP1_GRID_SEGMENTS 0x0DD1
#define GL_MAP1_INDEX 0x0D91
#define GL_MAP1_NORMAL 0x0D92
#define GL_MAP1_TEXTURE_COORD_1 0x0D93
#define GL_MAP1_TEXTURE_COORD_2 0x0D94
#define GL_MAP1_TEXTURE_COORD_3 0x0D95
#define GL_MAP1_TEXTURE_COORD_4 0x0D96
#define GL_MAP1_VERTEX_3 0x0D97
#define GL_MAP1_VERTEX_4 0x0D98
#define GL_MAP2_COLOR_4 0x0DB0
#define GL_MAP2_GRID_DOMAIN 0x0DD2
#define GL_MAP2_GRID_SEGMENTS 0x0DD3
#define GL_MAP2_INDEX 0x0DB1
#define GL_MAP2_NORMAL 0x0DB2
#define GL_MAP2_TEXTURE_COORD_1 0x0DB3
#define GL_MAP2_TEXTURE_COORD_2 0x0DB4
#define GL_MAP2_TEXTURE_COORD_3 0x0DB5
#define GL_MAP2_TEXTURE_COORD_4 0x0DB6
#define GL_MAP2_VERTEX_3 0x0DB7
#define GL_MAP2_VERTEX_4 0x0DB8
#define GL_MAP_COLOR 0x0D10
#define GL_MAP_STENCIL 0x0D11
#define GL_MATRIX_MODE 0x0BA0
#define GL_MAX_ATTRIB_STACK_DEPTH 0x0D35
#define GL_MAX_CLIENT_ATTRIB_STACK_DEPTH 0x0D3B
#define GL_MAX_CLIP_PLANES 0x0D32
#define GL_MAX_EVAL_ORDER 0x0D30
#define GL_MAX_LIGHTS 0x0D31
#define GL_MAX_LIST_NESTING 0x0B31
#define GL_MAX_MODELVIEW_STACK_DEPTH 0x0D36
#define GL_MAX_NAME_STACK_DEPTH 0x0D37
#define GL_MAX_PIXEL_MAP_TABLE 0x0D34
#define GL_MAX_PROJECTION_STACK_DEPTH 0x0D38
#define GL_MAX_TEXTURE_SIZE 0x0D33
#define GL_MAX_TEXTURE_STACK_DEPTH 0x0D39
#define GL_MAX_VIEWPORT_DIMS 0x0D3A
#define GL_MODELVIEW 0x1700
#define GL_MODELVIEW_MATRIX 0x0BA6
#define GL_MODELVIEW_STACK_DEPTH 0x0BA3
#define GL_MODULATE 0x2100
#define GL_MULT 0x0103
#define GL_N3F_V3F 0x2A25
#define GL_NAME_STACK_DEPTH 0x0D70
#define GL_NAND 0x150E
#define GL_NEAREST 0x2600
#define GL_NEAREST_MIPMAP_LINEAR 0x2702
#define GL_NEAREST_MIPMAP_NEAREST 0x2700
#define GL_NEVER 0x0200
#define GL_NICEST 0x1102
#define GL_NONE 0
#define GL_NOOP 0x1505
#define GL_NOR 0x1508
#define GL_NORMALIZE 0x0BA1
#define GL_NORMAL_ARRAY 0x8075
#define GL_NORMAL_ARRAY_POINTER 0x808F
#define GL_NORMAL_ARRAY_STRIDE 0x807F
#define GL_NORMAL_ARRAY_TYPE 0x807E
#define GL_NOTEQUAL 0x0205
#define GL_NO_ERROR 0
#define GL_OBJECT_LINEAR 0x2401
#define GL_OBJECT_PLANE 0x2501
#define GL_ONE 1
#define GL_ONE_MINUS_DST_ALPHA 0x0305
#define GL_ONE_MINUS_DST_COLOR 0x0307
#define GL_ONE_MINUS_SRC_ALPHA 0x0303
#define GL_ONE_MINUS_SRC_COLOR 0x0301
#define GL_OR 0x1507
#define GL_ORDER 0x0A01
#define GL_OR_INVERTED 0x150D
#define GL_OR_REVERSE 0x150B
#define GL_OUT_OF_MEMORY 0x0505
#define GL_PACK_ALIGNMENT 0x0D05
#define GL_PACK_LSB_FIRST 0x0D01
#define GL_PACK_ROW_LENGTH 0x0D02
#define GL_PACK_SKIP_PIXELS 0x0D04
#define GL_PACK_SKIP_ROWS 0x0D03
#define GL_PACK_SWAP_BYTES 0x0D00
#define GL_PASS_THROUGH_TOKEN 0x0700
#define GL_PERSPECTIVE_CORRECTION_HINT 0x0C50
#define GL_PIXEL_MAP_A_TO_A 0x0C79
#define GL_PIXEL_MAP_A_TO_A_SIZE 0x0CB9
#define GL_PIXEL_MAP_B_TO_B 0x0C78
#define GL_PIXEL_MAP_B_TO_B_SIZE 0x0CB8
#define GL_PIXEL_MAP_G_TO_G 0x0C77
#define GL_PIXEL_MAP_G_TO_G_SIZE 0x0CB7
#define GL_PIXEL_MAP_I_TO_A 0x0C75
#define GL_PIXEL_MAP_I_TO_A_SIZE 0x0CB5
#define GL_PIXEL_MAP_I_TO_B 0x0C74
#define GL_PIXEL_MAP_I_TO_B_SIZE 0x0CB4
#define GL_PIXEL_MAP_I_TO_G 0x0C73
#define GL_PIXEL_MAP_I_TO_G_SIZE 0x0CB3
#define GL_PIXEL_MAP_I_TO_I 0x0C70
#define GL_PIXEL_MAP_I_TO_I_SIZE 0x0CB0
#define GL_PIXEL_MAP_I_TO_R 0x0C72
#define GL_PIXEL_MAP_I_TO_R_SIZE 0x0CB2
#define GL_PIXEL_MAP_R_TO_R 0x0C76
#define GL_PIXEL_MAP_R_TO_R_SIZE 0x0CB6
#define GL_PIXEL_MAP_S_TO_S 0x0C71
#define GL_PIXEL_MAP_S_TO_S_SIZE 0x0CB1
#define GL_PIXEL_MODE_BIT 0x00000020
#define GL_POINT 0x1B00
#define GL_POINTS 0x0000
#define GL_POINT_BIT 0x00000002
#define GL_POINT_SIZE 0x0B11
#define GL_POINT_SIZE_GRANULARITY 0x0B13
#define GL_POINT_SIZE_RANGE 0x0B12
#define GL_POINT_SMOOTH 0x0B10
#define GL_POINT_SMOOTH_HINT 0x0C51
#define GL_POINT_TOKEN 0x0701
#define GL_POLYGON 0x0009
#define GL_POLYGON_BIT 0x00000008
#define GL_POLYGON_MODE 0x0B40
#define GL_POLYGON_OFFSET_FACTOR 0x8038
#define GL_POLYGON_OFFSET_FILL 0x8037
#define GL_POLYGON_OFFSET_LINE 0x2A02
#define GL_POLYGON_OFFSET_POINT 0x2A01
#define GL_POLYGON_OFFSET_UNITS 0x2A00
#define GL_POLYGON_SMOOTH 0x0B41
#define GL_POLYGON_SMOOTH_HINT 0x0C53
#define GL_POLYGON_STIPPLE 0x0B42
#define GL_POLYGON_STIPPLE_BIT 0x00000010
#define GL_POLYGON_TOKEN 0x0703
#define GL_POSITION 0x1203
#define GL_PROJECTION 0x1701
#define GL_PROJECTION_MATRIX 0x0BA7
#define GL_PROJECTION_STACK_DEPTH 0x0BA4
#define GL_PROXY_TEXTURE_1D 0x8063
#define GL_PROXY_TEXTURE_2D 0x8064
#define GL_Q 0x2003
#define GL_QUADRATIC_ATTENUATION 0x1209
#define GL_QUADS 0x0007
#define GL_QUAD_STRIP 0x0008
#define GL_R 0x2002
#define GL_R3_G3_B2 0x2A10
#define GL_READ_BUFFER 0x0C02
#define GL_RED 0x1903
#define GL_RED_BIAS 0x0D15
#define GL_RED_BITS 0x0D52
#define GL_RED_SCALE 0x0D14
#define GL_RENDER 0x1C00
#define GL_RENDERER 0x1F01
#define GL_RENDER_MODE 0x0C40
#define GL_REPEAT 0x2901
#define GL_REPLACE 0x1E01
#define GL_RETURN 0x0102
#define GL_RGB 0x1907
#define GL_RGB10 0x8052
#define GL_RGB10_A2 0x8059
#define GL_RGB12 0x8053
#define GL_RGB16 0x8054
#define GL_RGB4 0x804F
#define GL_RGB5 0x8050
#define GL_RGB5_A1 0x8057
#define GL_RGB8 0x8051
#define GL_RGBA 0x1908
#define GL_RGBA12 0x805A
#define GL_RGBA16 0x805B
#define GL_RGBA2 0x8055
#define GL_RGBA4 0x8056
#define GL_RGBA8 0x8058
#define GL_RGBA_MODE 0x0C31
#define GL_RIGHT 0x0407
#define GL_S 0x2000
#define GL_SCISSOR_BIT 0x00080000
#define GL_SCISSOR_BOX 0x0C10
#define GL_SCISSOR_TEST 0x0C11
#define GL_SELECT 0x1C02
#define GL_SELECTION_BUFFER_POINTER 0x0DF3
#define GL_SELECTION_BUFFER_SIZE 0x0DF4
#define GL_SET 0x150F
#define GL_SHADE_MODEL 0x0B54
#define GL_SHININESS 0x1601
#define GL_SHORT 0x1402
#define GL_SMOOTH 0x1D01
#define GL_SPECULAR 0x1202
#define GL_SPHERE_MAP 0x2402
#define GL_SPOT_CUTOFF 0x1206
#define GL_SPOT_DIRECTION 0x1204
#define GL_SPOT_EXPONENT 0x1205
#define GL_SRC_ALPHA 0x0302
#define GL_SRC_ALPHA_SATURATE 0x0308
#define GL_SRC_COLOR 0x0300
#define GL_STACK_OVERFLOW 0x0503
#define GL_STACK_UNDERFLOW 0x0504
#define GL_STENCIL 0x1802
#define GL_STENCIL_BITS 0x0D57
#define GL_STENCIL_BUFFER_BIT 0x00000400
#define GL_STENCIL_CLEAR_VALUE 0x0B91
#define GL_STENCIL_FAIL 0x0B94
#define GL_STENCIL_FUNC 0x0B92
#define GL_STENCIL_INDEX 0x1901
#define GL_STENCIL_PASS_DEPTH_FAIL 0x0B95
#define GL_STENCIL_PASS_DEPTH_PASS 0x0B96
#define GL_STENCIL_REF 0x0B97
#define GL_STENCIL_TEST 0x0B90
#define GL_STENCIL_VALUE_MASK 0x0B93
#define GL_STENCIL_WRITEMASK 0x0B98
#define GL_STEREO 0x0C33
#define GL_SUBPIXEL_BITS 0x0D50
#define GL_T 0x2001
#define GL_T2F_C3F_V3F 0x2A2A
#define GL_T2F_C4F_N3F_V3F 0x2A2C
#define GL_T2F_C4UB_V3F 0x2A29
#define GL_T2F_N3F_V3F 0x2A2B
#define GL_T2F_V3F 0x2A27
#define GL_T4F_C4F_N3F_V4F 0x2A2D
#define GL_T4F_V4F 0x2A28
#define GL_TEXTURE 0x1702
#define GL_TEXTURE_1D 0x0DE0
#define GL_TEXTURE_2D 0x0DE1
#define GL_TEXTURE_ALPHA_SIZE 0x805F
#define GL_TEXTURE_BINDING_1D 0x8068
#define GL_TEXTURE_BINDING_2D 0x8069
#define GL_TEXTURE_BIT 0x00040000
#define GL_TEXTURE_BLUE_SIZE 0x805E
#define GL_TEXTURE_BORDER 0x1005
#define GL_TEXTURE_BORDER_COLOR 0x1004
#define GL_TEXTURE_COMPONENTS 0x1003
#define GL_TEXTURE_COORD_ARRAY 0x8078
#define GL_TEXTURE_COORD_ARRAY_POINTER 0x8092
#define GL_TEXTURE_COORD_ARRAY_SIZE 0x8088
#define GL_TEXTURE_COORD_ARRAY_STRIDE 0x808A
#define GL_TEXTURE_COORD_ARRAY_TYPE 0x8089
#define GL_TEXTURE_ENV 0x2300
#define GL_TEXTURE_ENV_COLOR 0x2201
#define GL_TEXTURE_ENV_MODE 0x2200
#define GL_TEXTURE_GEN_MODE 0x2500
#define GL_TEXTURE_GEN_Q 0x0C63
#define GL_TEXTURE_GEN_R 0x0C62
#define GL_TEXTURE_GEN_S 0x0C60
#define GL_TEXTURE_GEN_T 0x0C61
#define GL_TEXTURE_GREEN_SIZE 0x805D
#define GL_TEXTURE_HEIGHT 0x1001
#define GL_TEXTURE_INTENSITY_SIZE 0x8061
#define GL_TEXTURE_INTERNAL_FORMAT 0x1003
#define GL_TEXTURE_LUMINANCE_SIZE 0x8060
#define GL_TEXTURE_MAG_FILTER 0x2800
#define GL_TEXTURE_MATRIX 0x0BA8
#define GL_TEXTURE_MIN_FILTER 0x2801
#define GL_TEXTURE_PRIORITY 0x8066
#define GL_TEXTURE_RED_SIZE 0x805C
#define GL_TEXTURE_RESIDENT 0x8067
#define GL_TEXTURE_STACK_DEPTH 0x0BA5
#define GL_TEXTURE_WIDTH 0x1000
#define GL_TEXTURE_WRAP_S 0x2802
#define GL_TEXTURE_WRAP_T 0x2803
#define GL_TRANSFORM_BIT 0x00001000
#define GL_TRIANGLES 0x0004
#define GL_TRIANGLE_FAN 0x0006
#define GL_TRIANGLE_STRIP 0x0005
#define GL_TRUE 1
#define GL_UNPACK_ALIGNMENT 0x0CF5
#define GL_UNPACK_LSB_FIRST 0x0CF1
#define GL_UNPACK_ROW_LENGTH 0x0CF2
#define GL_UNPACK_SKIP_PIXELS 0x0CF4
#define GL_UNPACK_SKIP_ROWS 0x0CF3
#define GL_UNPACK_SWAP_BYTES 0x0CF0
#define GL_UNSIGNED_BYTE 0x1401
#define GL_UNSIGNED_INT 0x1405
#define GL_UNSIGNED_SHORT 0x1403
#define GL_V2F 0x2A20
#define GL_V3F 0x2A21
#define GL_VENDOR 0x1F00
#define GL_VERSION 0x1F02
#define GL_VERTEX_ARRAY 0x8074
#define GL_VERTEX_ARRAY_POINTER 0x808E
#define GL_VERTEX_ARRAY_SIZE 0x807A
#define GL_VERTEX_ARRAY_STRIDE 0x807C
#define GL_VERTEX_ARRAY_TYPE 0x807B
#define GL_VIEWPORT 0x0BA2
#define GL_VIEWPORT_BIT 0x00000800
#define GL_XOR 0x1506
#define GL_ZERO 0
#define GL_ZOOM_X 0x0D16
#define GL_ZOOM_Y 0x0D17

#define GL_ALIASED_LINE_WIDTH_RANGE 0x846E
#define GL_ALIASED_POINT_SIZE_RANGE 0x846D
#define GL_BGR 0x80E0
#define GL_BGRA 0x80E1
#define GL_CLAMP_TO_EDGE 0x812F
#define GL_LIGHT_MODEL_COLOR_CONTROL 0x81F8
#define GL_MAX_3D_TEXTURE_SIZE 0x8073
#define GL_MAX_ELEMENTS_INDICES 0x80E9
#define GL_MAX_ELEMENTS_VERTICES 0x80E8
#define GL_PACK_IMAGE_HEIGHT 0x806C
#define GL_PACK_SKIP_IMAGES 0x806B
#define GL_PROXY_TEXTURE_3D 0x8070
#define GL_RESCALE_NORMAL 0x803A
#define GL_SEPARATE_SPECULAR_COLOR 0x81FA
#define GL_SINGLE_COLOR 0x81F9
#define GL_SMOOTH_LINE_WIDTH_GRANULARITY 0x0B23
#define GL_SMOOTH_LINE_WIDTH_RANGE 0x0B22
#define GL_SMOOTH_POINT_SIZE_GRANULARITY 0x0B13
#define GL_SMOOTH_POINT_SIZE_RANGE 0x0B12
#define GL_TEXTURE_3D 0x806F
#define GL_TEXTURE_BASE_LEVEL 0x813C
#define GL_TEXTURE_BINDING_3D 0x806A
#define GL_TEXTURE_DEPTH 0x8071
#define GL_TEXTURE_MAX_LEVEL 0x813D
#define GL_TEXTURE_MAX_LOD 0x813B
#define GL_TEXTURE_MIN_LOD 0x813A
#define GL_TEXTURE_WRAP_R 0x8072
#define GL_UNPACK_IMAGE_HEIGHT 0x806E
#define GL_UNPACK_SKIP_IMAGES 0x806D
#define GL_UNSIGNED_BYTE_2_3_3_REV 0x8362
#define GL_UNSIGNED_BYTE_3_3_2 0x8032
#define GL_UNSIGNED_INT_10_10_10_2 0x8036
#define GL_UNSIGNED_INT_2_10_10_10_REV 0x8368
#define GL_UNSIGNED_INT_8_8_8_8 0x8035
#define GL_UNSIGNED_INT_8_8_8_8_REV 0x8367
#define GL_UNSIGNED_SHORT_1_5_5_5_REV 0x8366
#define GL_UNSIGNED_SHORT_4_4_4_4 0x8033
#define GL_UNSIGNED_SHORT_4_4_4_4_REV 0x8365
#define GL_UNSIGNED_SHORT_5_5_5_1 0x8034
#define GL_UNSIGNED_SHORT_5_6_5 0x8363
#define GL_UNSIGNED_SHORT_5_6_5_REV 0x8364

#define GL_ACTIVE_TEXTURE 0x84E0
#define GL_ADD_SIGNED 0x8574
#define GL_CLAMP_TO_BORDER 0x812D
#define GL_CLIENT_ACTIVE_TEXTURE 0x84E1
#define GL_COMBINE 0x8570
#define GL_COMBINE_ALPHA 0x8572
#define GL_COMBINE_RGB 0x8571
#define GL_COMPRESSED_ALPHA 0x84E9
#define GL_COMPRESSED_INTENSITY 0x84EC
#define GL_COMPRESSED_LUMINANCE 0x84EA
#define GL_COMPRESSED_LUMINANCE_ALPHA 0x84EB
#define GL_COMPRESSED_RGB 0x84ED
#define GL_COMPRESSED_RGBA 0x84EE
#define GL_COMPRESSED_TEXTURE_FORMATS 0x86A3
#define GL_CONSTANT 0x8576
#define GL_DOT3_RGB 0x86AE
#define GL_DOT3_RGBA 0x86AF
#define GL_INTERPOLATE 0x8575
#define GL_MAX_CUBE_MAP_TEXTURE_SIZE 0x851C
#define GL_MAX_TEXTURE_UNITS 0x84E2
#define GL_MULTISAMPLE 0x809D
#define GL_MULTISAMPLE_BIT 0x20000000
#define GL_NORMAL_MAP 0x8511
#define GL_NUM_COMPRESSED_TEXTURE_FORMATS 0x86A2
#define GL_OPERAND0_ALPHA 0x8598
#define GL_OPERAND0_RGB 0x8590
#define GL_OPERAND1_ALPHA 0x8599
#define GL_OPERAND1_RGB 0x8591
#define GL_OPERAND2_ALPHA 0x859A
#define GL_OPERAND2_RGB 0x8592
#define GL_PREVIOUS 0x8578
#define GL_PRIMARY_COLOR 0x8577
#define GL_PROXY_TEXTURE_CUBE_MAP 0x851B
#define GL_REFLECTION_MAP 0x8512
#define GL_RGB_SCALE 0x8573
#define GL_SAMPLES 0x80A9
#define GL_SAMPLE_ALPHA_TO_COVERAGE 0x809E
#define GL_SAMPLE_ALPHA_TO_ONE 0x809F
#define GL_SAMPLE_BUFFERS 0x80A8
#define GL_SAMPLE_COVERAGE 0x80A0
#define GL_SAMPLE_COVERAGE_INVERT 0x80AB
#define GL_SAMPLE_COVERAGE_VALUE 0x80AA
#define GL_SOURCE0_ALPHA 0x8588
#define GL_SOURCE0_RGB 0x8580
#define GL_SOURCE1_ALPHA 0x8589
#define GL_SOURCE1_RGB 0x8581
#define GL_SOURCE2_ALPHA 0x858A
#define GL_SOURCE2_RGB 0x8582
#define GL_SUBTRACT 0x84E7
#define GL_TEXTURE0 0x84C0
#define GL_TEXTURE1 0x84C1
#define GL_TEXTURE10 0x84CA
#define GL_TEXTURE11 0x84CB
#define GL_TEXTURE12 0x84CC
#define GL_TEXTURE13 0x84CD
#define GL_TEXTURE14 0x84CE
#define GL_TEXTURE15 0x84CF
#define GL_TEXTURE16 0x84D0
#define GL_TEXTURE17 0x84D1
#define GL_TEXTURE18 0x84D2
#define GL_TEXTURE19 0x84D3
#define GL_TEXTURE2 0x84C2
#define GL_TEXTURE20 0x84D4
#define GL_TEXTURE21 0x84D5
#define GL_TEXTURE22 0x84D6
#define GL_TEXTURE23 0x84D7
#define GL_TEXTURE24 0x84D8
#define GL_TEXTURE25 0x84D9
#define GL_TEXTURE26 0x84DA
#define GL_TEXTURE27 0x84DB
#define GL_TEXTURE28 0x84DC
#define GL_TEXTURE29 0x84DD
#define GL_TEXTURE3 0x84C3
#define GL_TEXTURE30 0x84DE
#define GL_TEXTURE31 0x84DF
#define GL_TEXTURE4 0x84C4
#define GL_TEXTURE5 0x84C5
#define GL_TEXTURE6 0x84C6
#define GL_TEXTURE7 0x84C7
#define GL_TEXTURE8 0x84C8
#define GL_TEXTURE9 0x84C9
#define GL_TEXTURE_BINDING_CUBE_MAP 0x8514
#define GL_TEXTURE_COMPRESSED 0x86A1
#define GL_TEXTURE_COMPRESSED_IMAGE_SIZE 0x86A0
#define GL_TEXTURE_COMPRESSION_HINT 0x84EF
#define GL_TEXTURE_CUBE_MAP 0x8513
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X 0x8516
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y 0x8518
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z 0x851A
#define GL_TEXTURE_CUBE_MAP_POSITIVE_X 0x8515
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y 0x8517
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z 0x8519
#define GL_TRANSPOSE_COLOR_MATRIX 0x84E6
#define GL_TRANSPOSE_MODELVIEW_MATRIX 0x84E3
#define GL_TRANSPOSE_PROJECTION_MATRIX 0x84E4
#define GL_TRANSPOSE_TEXTURE_MATRIX 0x84E5

#define GL_BLEND_COLOR 0x8005
#define GL_BLEND_DST_ALPHA 0x80CA
#define GL_BLEND_DST_RGB 0x80C8
#define GL_BLEND_SRC_ALPHA 0x80CB
#define GL_BLEND_SRC_RGB 0x80C9
#define GL_COLOR_SUM 0x8458
#define GL_COMPARE_R_TO_TEXTURE 0x884E
#define GL_CONSTANT_ALPHA 0x8003
#define GL_CONSTANT_COLOR 0x8001
#define GL_CURRENT_FOG_COORDINATE 0x8453
#define GL_CURRENT_SECONDARY_COLOR 0x8459
#define GL_DECR_WRAP 0x8508
#define GL_DEPTH_COMPONENT16 0x81A5
#define GL_DEPTH_COMPONENT24 0x81A6
#define GL_DEPTH_COMPONENT32 0x81A7
#define GL_DEPTH_TEXTURE_MODE 0x884B
#define GL_FOG_COORDINATE 0x8451
#define GL_FOG_COORDINATE_ARRAY 0x8457
#define GL_FOG_COORDINATE_ARRAY_POINTER 0x8456
#define GL_FOG_COORDINATE_ARRAY_STRIDE 0x8455
#define GL_FOG_COORDINATE_ARRAY_TYPE 0x8454
#define GL_FOG_COORDINATE_SOURCE 0x8450
#define GL_FRAGMENT_DEPTH 0x8452
#define GL_FUNC_ADD 0x8006
#define GL_FUNC_REVERSE_SUBTRACT 0x800B
#define GL_FUNC_SUBTRACT 0x800A
#define GL_GENERATE_MIPMAP 0x8191
#define GL_GENERATE_MIPMAP_HINT 0x8192
#define GL_INCR_WRAP 0x8507
#define GL_MAX 0x8008
#define GL_MAX_TEXTURE_LOD_BIAS 0x84FD
#define GL_MIN 0x8007
#define GL_MIRRORED_REPEAT 0x8370
#define GL_ONE_MINUS_CONSTANT_ALPHA 0x8004
#define GL_ONE_MINUS_CONSTANT_COLOR 0x8002
#define GL_POINT_DISTANCE_ATTENUATION 0x8129
#define GL_POINT_FADE_THRESHOLD_SIZE 0x8128
#define GL_POINT_SIZE_MAX 0x8127
#define GL_POINT_SIZE_MIN 0x8126
#define GL_SECONDARY_COLOR_ARRAY 0x845E
#define GL_SECONDARY_COLOR_ARRAY_POINTER 0x845D
#define GL_SECONDARY_COLOR_ARRAY_SIZE 0x845A
#define GL_SECONDARY_COLOR_ARRAY_STRIDE 0x845C
#define GL_SECONDARY_COLOR_ARRAY_TYPE 0x845B
#define GL_TEXTURE_COMPARE_FUNC 0x884D
#define GL_TEXTURE_COMPARE_MODE 0x884C
#define GL_TEXTURE_DEPTH_SIZE 0x884A
#define GL_TEXTURE_FILTER_CONTROL 0x8500
#define GL_TEXTURE_LOD_BIAS 0x8501

#define GL_ARRAY_BUFFER 0x8892
#define GL_ARRAY_BUFFER_BINDING 0x8894
#define GL_BUFFER_ACCESS 0x88BB
#define GL_BUFFER_MAPPED 0x88BC
#define GL_BUFFER_MAP_POINTER 0x88BD
#define GL_BUFFER_SIZE 0x8764
#define GL_BUFFER_USAGE 0x8765
#define GL_COLOR_ARRAY_BUFFER_BINDING 0x8898
#define GL_CURRENT_FOG_COORD 0x8453
#define GL_CURRENT_QUERY 0x8865
#define GL_DYNAMIC_COPY 0x88EA
#define GL_DYNAMIC_DRAW 0x88E8
#define GL_DYNAMIC_READ 0x88E9
#define GL_EDGE_FLAG_ARRAY_BUFFER_BINDING 0x889B
#define GL_ELEMENT_ARRAY_BUFFER 0x8893
#define GL_ELEMENT_ARRAY_BUFFER_BINDING 0x8895
#define GL_FOG_COORD 0x8451
#define GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING 0x889D
#define GL_FOG_COORD_ARRAY 0x8457
#define GL_FOG_COORD_ARRAY_BUFFER_BINDING 0x889D
#define GL_FOG_COORD_ARRAY_POINTER 0x8456
#define GL_FOG_COORD_ARRAY_STRIDE 0x8455
#define GL_FOG_COORD_ARRAY_TYPE 0x8454
#define GL_FOG_COORD_SRC 0x8450
#define GL_INDEX_ARRAY_BUFFER_BINDING 0x8899
#define GL_NORMAL_ARRAY_BUFFER_BINDING 0x8897
#define GL_QUERY_COUNTER_BITS 0x8864
#define GL_QUERY_RESULT 0x8866
#define GL_QUERY_RESULT_AVAILABLE 0x8867
#define GL_READ_ONLY 0x88B8
#define GL_READ_WRITE 0x88BA
#define GL_SAMPLES_PASSED 0x8914
#define GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING 0x889C
#define GL_SRC0_ALPHA 0x8588
#define GL_SRC0_RGB 0x8580
#define GL_SRC1_ALPHA 0x8589
#define GL_SRC1_RGB 0x8581
#define GL_SRC2_ALPHA 0x858A
#define GL_SRC2_RGB 0x8582
#define GL_STATIC_COPY 0x88E6
#define GL_STATIC_DRAW 0x88E4
#define GL_STATIC_READ 0x88E5
#define GL_STREAM_COPY 0x88E2
#define GL_STREAM_DRAW 0x88E0
#define GL_STREAM_READ 0x88E1
#define GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING 0x889A
#define GL_VERTEX_ARRAY_BUFFER_BINDING 0x8896
#define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING 0x889F
#define GL_WEIGHT_ARRAY_BUFFER_BINDING 0x889E
#define GL_WRITE_ONLY 0x88B9

#define GL_ACTIVE_ATTRIBUTES 0x8B89
#define GL_ACTIVE_ATTRIBUTE_MAX_LENGTH 0x8B8A
#define GL_ACTIVE_UNIFORMS 0x8B86
#define GL_ACTIVE_UNIFORM_MAX_LENGTH 0x8B87
#define GL_ATTACHED_SHADERS 0x8B85
#define GL_BLEND_EQUATION_ALPHA 0x883D
#define GL_BLEND_EQUATION_RGB 0x8009
#define GL_BOOL 0x8B56
#define GL_BOOL_VEC2 0x8B57
#define GL_BOOL_VEC3 0x8B58
#define GL_BOOL_VEC4 0x8B59
#define GL_COMPILE_STATUS 0x8B81
#define GL_COORD_REPLACE 0x8862
#define GL_CURRENT_PROGRAM 0x8B8D
#define GL_CURRENT_VERTEX_ATTRIB 0x8626
#define GL_DELETE_STATUS 0x8B80
#define GL_DRAW_BUFFER0 0x8825
#define GL_DRAW_BUFFER1 0x8826
#define GL_DRAW_BUFFER10 0x882F
#define GL_DRAW_BUFFER11 0x8830
#define GL_DRAW_BUFFER12 0x8831
#define GL_DRAW_BUFFER13 0x8832
#define GL_DRAW_BUFFER14 0x8833
#define GL_DRAW_BUFFER15 0x8834
#define GL_DRAW_BUFFER2 0x8827
#define GL_DRAW_BUFFER3 0x8828
#define GL_DRAW_BUFFER4 0x8829
#define GL_DRAW_BUFFER5 0x882A
#define GL_DRAW_BUFFER6 0x882B
#define GL_DRAW_BUFFER7 0x882C
#define GL_DRAW_BUFFER8 0x882D
#define GL_DRAW_BUFFER9 0x882E
#define GL_FLOAT_MAT2 0x8B5A
#define GL_FLOAT_MAT3 0x8B5B
#define GL_FLOAT_MAT4 0x8B5C
#define GL_FLOAT_VEC2 0x8B50
#define GL_FLOAT_VEC3 0x8B51
#define GL_FLOAT_VEC4 0x8B52
#define GL_FRAGMENT_SHADER 0x8B30
#define GL_FRAGMENT_SHADER_DERIVATIVE_HINT 0x8B8B
#define GL_INFO_LOG_LENGTH 0x8B84
#define GL_INT_VEC2 0x8B53
#define GL_INT_VEC3 0x8B54
#define GL_INT_VEC4 0x8B55
#define GL_LINK_STATUS 0x8B82
#define GL_LOWER_LEFT 0x8CA1
#define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS 0x8B4D
#define GL_MAX_DRAW_BUFFERS 0x8824
#define GL_MAX_FRAGMENT_UNIFORM_COMPONENTS 0x8B49
#define GL_MAX_TEXTURE_COORDS 0x8871
#define GL_MAX_TEXTURE_IMAGE_UNITS 0x8872
#define GL_MAX_VARYING_FLOATS 0x8B4B
#define GL_MAX_VERTEX_ATTRIBS 0x8869
#define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS 0x8B4C
#define GL_MAX_VERTEX_UNIFORM_COMPONENTS 0x8B4A
#define GL_POINT_SPRITE 0x8861
#define GL_POINT_SPRITE_COORD_ORIGIN 0x8CA0
#define GL_SAMPLER_1D 0x8B5D
#define GL_SAMPLER_1D_SHADOW 0x8B61
#define GL_SAMPLER_2D 0x8B5E
#define GL_SAMPLER_2D_SHADOW 0x8B62
#define GL_SAMPLER_3D 0x8B5F
#define GL_SAMPLER_CUBE 0x8B60
#define GL_SHADER_SOURCE_LENGTH 0x8B88
#define GL_SHADER_TYPE 0x8B4F
#define GL_SHADING_LANGUAGE_VERSION 0x8B8C
#define GL_STENCIL_BACK_FAIL 0x8801
#define GL_STENCIL_BACK_FUNC 0x8800
#define GL_STENCIL_BACK_PASS_DEPTH_FAIL 0x8802
#define GL_STENCIL_BACK_PASS_DEPTH_PASS 0x8803
#define GL_STENCIL_BACK_REF 0x8CA3
#define GL_STENCIL_BACK_VALUE_MASK 0x8CA4
#define GL_STENCIL_BACK_WRITEMASK 0x8CA5
#define GL_UPPER_LEFT 0x8CA2
#define GL_VALIDATE_STATUS 0x8B83
#define GL_VERTEX_ATTRIB_ARRAY_ENABLED 0x8622
#define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED 0x886A
#define GL_VERTEX_ATTRIB_ARRAY_POINTER 0x8645
#define GL_VERTEX_ATTRIB_ARRAY_SIZE 0x8623
#define GL_VERTEX_ATTRIB_ARRAY_STRIDE 0x8624
#define GL_VERTEX_ATTRIB_ARRAY_TYPE 0x8625
#define GL_VERTEX_PROGRAM_POINT_SIZE 0x8642
#define GL_VERTEX_PROGRAM_TWO_SIDE 0x8643
#define GL_VERTEX_SHADER 0x8B31

#define GL_COMPRESSED_SLUMINANCE 0x8C4A
#define GL_COMPRESSED_SLUMINANCE_ALPHA 0x8C4B
#define GL_COMPRESSED_SRGB 0x8C48
#define GL_COMPRESSED_SRGB_ALPHA 0x8C49
#define GL_CURRENT_RASTER_SECONDARY_COLOR 0x845F
#define GL_FLOAT_MAT2x3 0x8B65
#define GL_FLOAT_MAT2x4 0x8B66
#define GL_FLOAT_MAT3x2 0x8B67
#define GL_FLOAT_MAT3x4 0x8B68
#define GL_FLOAT_MAT4x2 0x8B69
#define GL_FLOAT_MAT4x3 0x8B6A
#define GL_PIXEL_PACK_BUFFER 0x88EB
#define GL_PIXEL_PACK_BUFFER_BINDING 0x88ED
#define GL_PIXEL_UNPACK_BUFFER 0x88EC
#define GL_PIXEL_UNPACK_BUFFER_BINDING 0x88EF
#define GL_SLUMINANCE 0x8C46
#define GL_SLUMINANCE8 0x8C47
#define GL_SLUMINANCE8_ALPHA8 0x8C45
#define GL_SLUMINANCE_ALPHA 0x8C44
#define GL_SRGB 0x8C40
#define GL_SRGB8 0x8C41
#define GL_SRGB8_ALPHA8 0x8C43
#define GL_SRGB_ALPHA 0x8C42

#define GL_ALPHA_INTEGER 0x8D97
#define GL_BGRA_INTEGER 0x8D9B
#define GL_BGR_INTEGER 0x8D9A
#define GL_BLUE_INTEGER 0x8D96
#define GL_BUFFER_ACCESS_FLAGS 0x911F
#define GL_BUFFER_MAP_LENGTH 0x9120
#define GL_BUFFER_MAP_OFFSET 0x9121
#define GL_CLAMP_FRAGMENT_COLOR 0x891B
#define GL_CLAMP_READ_COLOR 0x891C
#define GL_CLAMP_VERTEX_COLOR 0x891A
#define GL_CLIP_DISTANCE0 0x3000
#define GL_CLIP_DISTANCE1 0x3001
#define GL_CLIP_DISTANCE2 0x3002
#define GL_CLIP_DISTANCE3 0x3003
#define GL_CLIP_DISTANCE4 0x3004
#define GL_CLIP_DISTANCE5 0x3005
#define GL_CLIP_DISTANCE6 0x3006
#define GL_CLIP_DISTANCE7 0x3007
#define GL_COLOR_ATTACHMENT0 0x8CE0
#define GL_COLOR_ATTACHMENT1 0x8CE1
#define GL_COLOR_ATTACHMENT10 0x8CEA
#define GL_COLOR_ATTACHMENT11 0x8CEB
#define GL_COLOR_ATTACHMENT12 0x8CEC
#define GL_COLOR_ATTACHMENT13 0x8CED
#define GL_COLOR_ATTACHMENT14 0x8CEE
#define GL_COLOR_ATTACHMENT15 0x8CEF
#define GL_COLOR_ATTACHMENT16 0x8CF0
#define GL_COLOR_ATTACHMENT17 0x8CF1
#define GL_COLOR_ATTACHMENT18 0x8CF2
#define GL_COLOR_ATTACHMENT19 0x8CF3
#define GL_COLOR_ATTACHMENT2 0x8CE2
#define GL_COLOR_ATTACHMENT20 0x8CF4
#define GL_COLOR_ATTACHMENT21 0x8CF5
#define GL_COLOR_ATTACHMENT22 0x8CF6
#define GL_COLOR_ATTACHMENT23 0x8CF7
#define GL_COLOR_ATTACHMENT24 0x8CF8
#define GL_COLOR_ATTACHMENT25 0x8CF9
#define GL_COLOR_ATTACHMENT26 0x8CFA
#define GL_COLOR_ATTACHMENT27 0x8CFB
#define GL_COLOR_ATTACHMENT28 0x8CFC
#define GL_COLOR_ATTACHMENT29 0x8CFD
#define GL_COLOR_ATTACHMENT3 0x8CE3
#define GL_COLOR_ATTACHMENT30 0x8CFE
#define GL_COLOR_ATTACHMENT31 0x8CFF
#define GL_COLOR_ATTACHMENT4 0x8CE4
#define GL_COLOR_ATTACHMENT5 0x8CE5
#define GL_COLOR_ATTACHMENT6 0x8CE6
#define GL_COLOR_ATTACHMENT7 0x8CE7
#define GL_COLOR_ATTACHMENT8 0x8CE8
#define GL_COLOR_ATTACHMENT9 0x8CE9
#define GL_COMPARE_REF_TO_TEXTURE 0x884E
#define GL_COMPRESSED_RED 0x8225
#define GL_COMPRESSED_RED_RGTC1 0x8DBB
#define GL_COMPRESSED_RG 0x8226
#define GL_COMPRESSED_RG_RGTC2 0x8DBD
#define GL_COMPRESSED_SIGNED_RED_RGTC1 0x8DBC
#define GL_COMPRESSED_SIGNED_RG_RGTC2 0x8DBE
#define GL_CONTEXT_FLAGS 0x821E
#define GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT 0x00000001
#define GL_DEPTH24_STENCIL8 0x88F0
#define GL_DEPTH32F_STENCIL8 0x8CAD
#define GL_DEPTH_ATTACHMENT 0x8D00
#define GL_DEPTH_COMPONENT32F 0x8CAC
#define GL_DEPTH_STENCIL 0x84F9
#define GL_DEPTH_STENCIL_ATTACHMENT 0x821A
#define GL_DRAW_FRAMEBUFFER 0x8CA9
#define GL_DRAW_FRAMEBUFFER_BINDING 0x8CA6
#define GL_FIXED_ONLY 0x891D
#define GL_FLOAT_32_UNSIGNED_INT_24_8_REV 0x8DAD
#define GL_FRAMEBUFFER 0x8D40
#define GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE 0x8215
#define GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE 0x8214
#define GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING 0x8210
#define GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE 0x8211
#define GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE 0x8216
#define GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE 0x8213
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME 0x8CD1
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE 0x8CD0
#define GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE 0x8212
#define GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE 0x8217
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE 0x8CD3
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER 0x8CD4
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL 0x8CD2
#define GL_FRAMEBUFFER_BINDING 0x8CA6
#define GL_FRAMEBUFFER_COMPLETE 0x8CD5
#define GL_FRAMEBUFFER_DEFAULT 0x8218
#define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT 0x8CD6
#define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER 0x8CDB
#define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT 0x8CD7
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE 0x8D56
#define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER 0x8CDC
#define GL_FRAMEBUFFER_SRGB 0x8DB9
#define GL_FRAMEBUFFER_UNDEFINED 0x8219
#define GL_FRAMEBUFFER_UNSUPPORTED 0x8CDD
#define GL_GREEN_INTEGER 0x8D95
#define GL_HALF_FLOAT 0x140B
#define GL_INTERLEAVED_ATTRIBS 0x8C8C
#define GL_INT_SAMPLER_1D 0x8DC9
#define GL_INT_SAMPLER_1D_ARRAY 0x8DCE
#define GL_INT_SAMPLER_2D 0x8DCA
#define GL_INT_SAMPLER_2D_ARRAY 0x8DCF
#define GL_INT_SAMPLER_3D 0x8DCB
#define GL_INT_SAMPLER_CUBE 0x8DCC
#define GL_INVALID_FRAMEBUFFER_OPERATION 0x0506
#define GL_MAJOR_VERSION 0x821B
#define GL_MAP_FLUSH_EXPLICIT_BIT 0x0010
#define GL_MAP_INVALIDATE_BUFFER_BIT 0x0008
#define GL_MAP_INVALIDATE_RANGE_BIT 0x0004
#define GL_MAP_READ_BIT 0x0001
#define GL_MAP_UNSYNCHRONIZED_BIT 0x0020
#define GL_MAP_WRITE_BIT 0x0002
#define GL_MAX_ARRAY_TEXTURE_LAYERS 0x88FF
#define GL_MAX_CLIP_DISTANCES 0x0D32
#define GL_MAX_COLOR_ATTACHMENTS 0x8CDF
#define GL_MAX_PROGRAM_TEXEL_OFFSET 0x8905
#define GL_MAX_RENDERBUFFER_SIZE 0x84E8
#define GL_MAX_SAMPLES 0x8D57
#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS 0x8C8A
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS 0x8C8B
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS 0x8C80
#define GL_MAX_VARYING_COMPONENTS 0x8B4B
#define GL_MINOR_VERSION 0x821C
#define GL_MIN_PROGRAM_TEXEL_OFFSET 0x8904
#define GL_NUM_EXTENSIONS 0x821D
#define GL_PRIMITIVES_GENERATED 0x8C87
#define GL_PROXY_TEXTURE_1D_ARRAY 0x8C19
#define GL_PROXY_TEXTURE_2D_ARRAY 0x8C1B
#define GL_QUERY_BY_REGION_NO_WAIT 0x8E16
#define GL_QUERY_BY_REGION_WAIT 0x8E15
#define GL_QUERY_NO_WAIT 0x8E14
#define GL_QUERY_WAIT 0x8E13
#define GL_R11F_G11F_B10F 0x8C3A
#define GL_R16 0x822A
#define GL_R16F 0x822D
#define GL_R16I 0x8233
#define GL_R16UI 0x8234
#define GL_R32F 0x822E
#define GL_R32I 0x8235
#define GL_R32UI 0x8236
#define GL_R8 0x8229
#define GL_R8I 0x8231
#define GL_R8UI 0x8232
#define GL_RASTERIZER_DISCARD 0x8C89
#define GL_READ_FRAMEBUFFER 0x8CA8
#define GL_READ_FRAMEBUFFER_BINDING 0x8CAA
#define GL_RED_INTEGER 0x8D94
#define GL_RENDERBUFFER 0x8D41
#define GL_RENDERBUFFER_ALPHA_SIZE 0x8D53
#define GL_RENDERBUFFER_BINDING 0x8CA7
#define GL_RENDERBUFFER_BLUE_SIZE 0x8D52
#define GL_RENDERBUFFER_DEPTH_SIZE 0x8D54
#define GL_RENDERBUFFER_GREEN_SIZE 0x8D51
#define GL_RENDERBUFFER_HEIGHT 0x8D43
#define GL_RENDERBUFFER_INTERNAL_FORMAT 0x8D44
#define GL_RENDERBUFFER_RED_SIZE 0x8D50
#define GL_RENDERBUFFER_SAMPLES 0x8CAB
#define GL_RENDERBUFFER_STENCIL_SIZE 0x8D55
#define GL_RENDERBUFFER_WIDTH 0x8D42
#define GL_RG 0x8227
#define GL_RG16 0x822C
#define GL_RG16F 0x822F
#define GL_RG16I 0x8239
#define GL_RG16UI 0x823A
#define GL_RG32F 0x8230
#define GL_RG32I 0x823B
#define GL_RG32UI 0x823C
#define GL_RG8 0x822B
#define GL_RG8I 0x8237
#define GL_RG8UI 0x8238
#define GL_RGB16F 0x881B
#define GL_RGB16I 0x8D89
#define GL_RGB16UI 0x8D77
#define GL_RGB32F 0x8815
#define GL_RGB32I 0x8D83
#define GL_RGB32UI 0x8D71
#define GL_RGB8I 0x8D8F
#define GL_RGB8UI 0x8D7D
#define GL_RGB9_E5 0x8C3D
#define GL_RGBA16F 0x881A
#define GL_RGBA16I 0x8D88
#define GL_RGBA16UI 0x8D76
#define GL_RGBA32F 0x8814
#define GL_RGBA32I 0x8D82
#define GL_RGBA32UI 0x8D70
#define GL_RGBA8I 0x8D8E
#define GL_RGBA8UI 0x8D7C
#define GL_RGBA_INTEGER 0x8D99
#define GL_RGB_INTEGER 0x8D98
#define GL_RG_INTEGER 0x8228
#define GL_SAMPLER_1D_ARRAY 0x8DC0
#define GL_SAMPLER_1D_ARRAY_SHADOW 0x8DC3
#define GL_SAMPLER_2D_ARRAY 0x8DC1
#define GL_SAMPLER_2D_ARRAY_SHADOW 0x8DC4
#define GL_SAMPLER_CUBE_SHADOW 0x8DC5
#define GL_SEPARATE_ATTRIBS 0x8C8D
#define GL_STENCIL_ATTACHMENT 0x8D20
#define GL_STENCIL_INDEX1 0x8D46
#define GL_STENCIL_INDEX16 0x8D49
#define GL_STENCIL_INDEX4 0x8D47
#define GL_STENCIL_INDEX8 0x8D48
#define GL_TEXTURE_1D_ARRAY 0x8C18
#define GL_TEXTURE_2D_ARRAY 0x8C1A
#define GL_TEXTURE_ALPHA_TYPE 0x8C13
#define GL_TEXTURE_BINDING_1D_ARRAY 0x8C1C
#define GL_TEXTURE_BINDING_2D_ARRAY 0x8C1D
#define GL_TEXTURE_BLUE_TYPE 0x8C12
#define GL_TEXTURE_DEPTH_TYPE 0x8C16
#define GL_TEXTURE_GREEN_TYPE 0x8C11
#define GL_TEXTURE_RED_TYPE 0x8C10
#define GL_TEXTURE_SHARED_SIZE 0x8C3F
#define GL_TEXTURE_STENCIL_SIZE 0x88F1
#define GL_TRANSFORM_FEEDBACK_BUFFER 0x8C8E
#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING 0x8C8F
#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE 0x8C7F
#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE 0x8C85
#define GL_TRANSFORM_FEEDBACK_BUFFER_START 0x8C84
#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN 0x8C88
#define GL_TRANSFORM_FEEDBACK_VARYINGS 0x8C83
#define GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH 0x8C76
#define GL_UNSIGNED_INT_10F_11F_11F_REV 0x8C3B
#define GL_UNSIGNED_INT_24_8 0x84FA
#define GL_UNSIGNED_INT_5_9_9_9_REV 0x8C3E
#define GL_UNSIGNED_INT_SAMPLER_1D 0x8DD1
#define GL_UNSIGNED_INT_SAMPLER_1D_ARRAY 0x8DD6
#define GL_UNSIGNED_INT_SAMPLER_2D 0x8DD2
#define GL_UNSIGNED_INT_SAMPLER_2D_ARRAY 0x8DD7
#define GL_UNSIGNED_INT_SAMPLER_3D 0x8DD3
#define GL_UNSIGNED_INT_SAMPLER_CUBE 0x8DD4
#define GL_UNSIGNED_INT_VEC2 0x8DC6
#define GL_UNSIGNED_INT_VEC3 0x8DC7
#define GL_UNSIGNED_INT_VEC4 0x8DC8
#define GL_UNSIGNED_NORMALIZED 0x8C17
#define GL_VERTEX_ARRAY_BINDING 0x85B5
#define GL_VERTEX_ATTRIB_ARRAY_INTEGER 0x88FD

extern void (CODEGEN_FUNCPTR *_ptrc_glAccum)(GLenum op, GLfloat value);
void glAccum(GLenum op, GLfloat value) {
	_ptrc_glAccum (op, value);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glAlphaFunc)(GLenum func, GLfloat ref);
void glAlphaFunc(GLenum func, GLfloat ref) {
	_ptrc_glAlphaFunc (func, ref);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glBegin)(GLenum mode);
void glBegin(GLenum mode) {
	_ptrc_glBegin (mode);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glBitmap)(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte * bitmap);
void glBitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte * bitmap) {
	_ptrc_glBitmap (width, height, xorig, yorig, xmove, ymove, bitmap);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glBlendFunc)(GLenum sfactor, GLenum dfactor);
void glBlendFunc(GLenum sfactor, GLenum dfactor) {
	_ptrc_glBlendFunc (sfactor, dfactor);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glCallList)(GLuint list);
void glCallList(GLuint list) {
	_ptrc_glCallList (list);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glCallLists)(GLsizei n, GLenum type, const void * lists);
void glCallLists(GLsizei n, GLenum type, const void * lists) {
	_ptrc_glCallLists (n, type, lists);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glClear)(GLbitfield mask);
void glClear(GLbitfield mask) {
	_ptrc_glClear (mask);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glClearAccum)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
void glClearAccum(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) {
	_ptrc_glClearAccum (red, green, blue, alpha);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glClearColor)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
void glClearColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) {
	_ptrc_glClearColor (red, green, blue, alpha);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glClearDepth)(GLdouble depth);
void glClearDepth(GLdouble depth) {
	_ptrc_glClearDepth (depth);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glClearIndex)(GLfloat c);
void glClearIndex(GLfloat c) {
	_ptrc_glClearIndex (c);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glClearStencil)(GLint s);
void glClearStencil(GLint s) {
	_ptrc_glClearStencil (s);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glClipPlane)(GLenum plane, const GLdouble * equation);
void glClipPlane(GLenum plane, const GLdouble * equation) {
	_ptrc_glClipPlane (plane, equation);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glColor3b)(GLbyte red, GLbyte green, GLbyte blue);
void glColor3b(GLbyte red, GLbyte green, GLbyte blue) {
	_ptrc_glColor3b (red, green, blue);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glColor3bv)(const GLbyte * v);
void glColor3bv(const GLbyte * v) {
	_ptrc_glColor3bv (v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glColor3d)(GLdouble red, GLdouble green, GLdouble blue);
void glColor3d(GLdouble red, GLdouble green, GLdouble blue) {
	_ptrc_glColor3d (red, green, blue);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glColor3dv)(const GLdouble * v);
void glColor3dv(const GLdouble * v) {
	_ptrc_glColor3dv (v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glColor3f)(GLfloat red, GLfloat green, GLfloat blue);
void glColor3f(GLfloat red, GLfloat green, GLfloat blue) {
	_ptrc_glColor3f (red, green, blue);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glColor3fv)(const GLfloat * v);
void glColor3fv(const GLfloat * v) {
	_ptrc_glColor3fv (v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glColor3i)(GLint red, GLint green, GLint blue);
void glColor3i(GLint red, GLint green, GLint blue) {
	_ptrc_glColor3i (red, green, blue);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glColor3iv)(const GLint * v);
void glColor3iv(const GLint * v) {
	_ptrc_glColor3iv (v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glColor3s)(GLshort red, GLshort green, GLshort blue);
void glColor3s(GLshort red, GLshort green, GLshort blue) {
	_ptrc_glColor3s (red, green, blue);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glColor3sv)(const GLshort * v);
void glColor3sv(const GLshort * v) {
	_ptrc_glColor3sv (v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glColor3ub)(GLubyte red, GLubyte green, GLubyte blue);
void glColor3ub(GLubyte red, GLubyte green, GLubyte blue) {
	_ptrc_glColor3ub (red, green, blue);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glColor3ubv)(const GLubyte * v);
void glColor3ubv(const GLubyte * v) {
	_ptrc_glColor3ubv (v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glColor3ui)(GLuint red, GLuint green, GLuint blue);
void glColor3ui(GLuint red, GLuint green, GLuint blue) {
	_ptrc_glColor3ui (red, green, blue);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glColor3uiv)(const GLuint * v);
void glColor3uiv(const GLuint * v) {
	_ptrc_glColor3uiv (v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glColor3us)(GLushort red, GLushort green, GLushort blue);
void glColor3us(GLushort red, GLushort green, GLushort blue) {
	_ptrc_glColor3us (red, green, blue);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glColor3usv)(const GLushort * v);
void glColor3usv(const GLushort * v) {
	_ptrc_glColor3usv (v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glColor4b)(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha);
void glColor4b(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha) {
	_ptrc_glColor4b (red, green, blue, alpha);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glColor4bv)(const GLbyte * v);
void glColor4bv(const GLbyte * v) {
	_ptrc_glColor4bv (v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glColor4d)(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha);
void glColor4d(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha) {
	_ptrc_glColor4d (red, green, blue, alpha);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glColor4dv)(const GLdouble * v);
void glColor4dv(const GLdouble * v) {
	_ptrc_glColor4dv (v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glColor4f)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
void glColor4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) {
	_ptrc_glColor4f (red, green, blue, alpha);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glColor4fv)(const GLfloat * v);
void glColor4fv(const GLfloat * v) {
	_ptrc_glColor4fv (v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glColor4i)(GLint red, GLint green, GLint blue, GLint alpha);
void glColor4i(GLint red, GLint green, GLint blue, GLint alpha) {
	_ptrc_glColor4i (red, green, blue, alpha);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glColor4iv)(const GLint * v);
void glColor4iv(const GLint * v) {
	_ptrc_glColor4iv (v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glColor4s)(GLshort red, GLshort green, GLshort blue, GLshort alpha);
void glColor4s(GLshort red, GLshort green, GLshort blue, GLshort alpha) {
	_ptrc_glColor4s (red, green, blue, alpha);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glColor4sv)(const GLshort * v);
void glColor4sv(const GLshort * v) {
	_ptrc_glColor4sv (v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glColor4ub)(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha);
void glColor4ub(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha) {
	_ptrc_glColor4ub (red, green, blue, alpha);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glColor4ubv)(const GLubyte * v);
void glColor4ubv(const GLubyte * v) {
	_ptrc_glColor4ubv (v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glColor4ui)(GLuint red, GLuint green, GLuint blue, GLuint alpha);
void glColor4ui(GLuint red, GLuint green, GLuint blue, GLuint alpha) {
	_ptrc_glColor4ui (red, green, blue, alpha);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glColor4uiv)(const GLuint * v);
void glColor4uiv(const GLuint * v) {
	_ptrc_glColor4uiv (v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glColor4us)(GLushort red, GLushort green, GLushort blue, GLushort alpha);
void glColor4us(GLushort red, GLushort green, GLushort blue, GLushort alpha) {
	_ptrc_glColor4us (red, green, blue, alpha);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glColor4usv)(const GLushort * v);
void glColor4usv(const GLushort * v) {
	_ptrc_glColor4usv (v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glColorMask)(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
void glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha) {
	_ptrc_glColorMask (red, green, blue, alpha);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glColorMaterial)(GLenum face, GLenum mode);
void glColorMaterial(GLenum face, GLenum mode) {
	_ptrc_glColorMaterial (face, mode);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glCopyPixels)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type);
void glCopyPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type) {
	_ptrc_glCopyPixels (x, y, width, height, type);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glCullFace)(GLenum mode);
void glCullFace(GLenum mode) {
	_ptrc_glCullFace (mode);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glDeleteLists)(GLuint list, GLsizei range);
void glDeleteLists(GLuint list, GLsizei range) {
	_ptrc_glDeleteLists (list, range);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glDepthFunc)(GLenum func);
void glDepthFunc(GLenum func) {
	_ptrc_glDepthFunc (func);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glDepthMask)(GLboolean flag);
void glDepthMask(GLboolean flag) {
	_ptrc_glDepthMask (flag);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glDepthRange)(GLdouble ren_near, GLdouble ren_far);
void glDepthRange(GLdouble ren_near, GLdouble ren_far) {
	_ptrc_glDepthRange (ren_near, ren_far);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glDisable)(GLenum cap);
void glDisable(GLenum cap) {
	_ptrc_glDisable (cap);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glDrawBuffer)(GLenum buf);
void glDrawBuffer(GLenum buf) {
	_ptrc_glDrawBuffer (buf);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glDrawPixels)(GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels);
void glDrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels) {
	_ptrc_glDrawPixels (width, height, format, type, pixels);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glEdgeFlag)(GLboolean flag);
void glEdgeFlag(GLboolean flag) {
	_ptrc_glEdgeFlag (flag);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glEdgeFlagv)(const GLboolean * flag);
void glEdgeFlagv(const GLboolean * flag) {
	_ptrc_glEdgeFlagv (flag);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glEnable)(GLenum cap);
void glEnable(GLenum cap) {
	_ptrc_glEnable (cap);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glEnd)(void);
void glEnd(void) {
	_ptrc_glEnd ();
}
extern void (CODEGEN_FUNCPTR *_ptrc_glEndList)(void);
void glEndList(void) {
	_ptrc_glEndList ();
}
extern void (CODEGEN_FUNCPTR *_ptrc_glEvalCoord1d)(GLdouble u);
void glEvalCoord1d(GLdouble u) {
	_ptrc_glEvalCoord1d (u);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glEvalCoord1dv)(const GLdouble * u);
void glEvalCoord1dv(const GLdouble * u) {
	_ptrc_glEvalCoord1dv (u);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glEvalCoord1f)(GLfloat u);
void glEvalCoord1f(GLfloat u) {
	_ptrc_glEvalCoord1f (u);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glEvalCoord1fv)(const GLfloat * u);
void glEvalCoord1fv(const GLfloat * u) {
	_ptrc_glEvalCoord1fv (u);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glEvalCoord2d)(GLdouble u, GLdouble v);
void glEvalCoord2d(GLdouble u, GLdouble v) {
	_ptrc_glEvalCoord2d (u, v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glEvalCoord2dv)(const GLdouble * u);
void glEvalCoord2dv(const GLdouble * u) {
	_ptrc_glEvalCoord2dv (u);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glEvalCoord2f)(GLfloat u, GLfloat v);
void glEvalCoord2f(GLfloat u, GLfloat v) {
	_ptrc_glEvalCoord2f (u, v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glEvalCoord2fv)(const GLfloat * u);
void glEvalCoord2fv(const GLfloat * u) {
	_ptrc_glEvalCoord2fv (u);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glEvalMesh1)(GLenum mode, GLint i1, GLint i2);
void glEvalMesh1(GLenum mode, GLint i1, GLint i2) {
	_ptrc_glEvalMesh1 (mode, i1, i2);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glEvalMesh2)(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2);
void glEvalMesh2(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2) {
	_ptrc_glEvalMesh2 (mode, i1, i2, j1, j2);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glEvalPoint1)(GLint i);
void glEvalPoint1(GLint i) {
	_ptrc_glEvalPoint1 (i);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glEvalPoint2)(GLint i, GLint j);
void glEvalPoint2(GLint i, GLint j) {
	_ptrc_glEvalPoint2 (i, j);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glFeedbackBuffer)(GLsizei size, GLenum type, GLfloat * buffer);
void glFeedbackBuffer(GLsizei size, GLenum type, GLfloat * buffer) {
	_ptrc_glFeedbackBuffer (size, type, buffer);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glFinish)(void);
void glFinish(void) {
	_ptrc_glFinish ();
}
extern void (CODEGEN_FUNCPTR *_ptrc_glFlush)(void);
void glFlush(void) {
	_ptrc_glFlush ();
}
extern void (CODEGEN_FUNCPTR *_ptrc_glFogf)(GLenum pname, GLfloat param);
void glFogf(GLenum pname, GLfloat param) {
	_ptrc_glFogf (pname, param);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glFogfv)(GLenum pname, const GLfloat * params);
void glFogfv(GLenum pname, const GLfloat * params) {
	_ptrc_glFogfv (pname, params);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glFogi)(GLenum pname, GLint param);
void glFogi(GLenum pname, GLint param) {
	_ptrc_glFogi (pname, param);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glFogiv)(GLenum pname, const GLint * params);
void glFogiv(GLenum pname, const GLint * params) {
	_ptrc_glFogiv (pname, params);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glFrontFace)(GLenum mode);
void glFrontFace(GLenum mode) {
	_ptrc_glFrontFace (mode);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glFrustum)(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
void glFrustum(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) {
	_ptrc_glFrustum (left, right, bottom, top, zNear, zFar);
}
extern GLuint (CODEGEN_FUNCPTR *_ptrc_glGenLists)(GLsizei range);
GLuint glGenLists(GLsizei range) {
	return _ptrc_glGenLists (range);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glGetBooleanv)(GLenum pname, GLboolean * data);
void glGetBooleanv(GLenum pname, GLboolean * data) {
	_ptrc_glGetBooleanv (pname, data);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glGetClipPlane)(GLenum plane, GLdouble * equation);
void glGetClipPlane(GLenum plane, GLdouble * equation) {
	_ptrc_glGetClipPlane (plane, equation);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glGetDoublev)(GLenum pname, GLdouble * data);
void glGetDoublev(GLenum pname, GLdouble * data) {
	_ptrc_glGetDoublev (pname, data);
}
extern GLenum (CODEGEN_FUNCPTR *_ptrc_glGetError)(void);
GLenum glGetError(void) {
	return _ptrc_glGetError ();
}
extern void (CODEGEN_FUNCPTR *_ptrc_glGetFloatv)(GLenum pname, GLfloat * data);
void glGetFloatv(GLenum pname, GLfloat * data) {
	_ptrc_glGetFloatv (pname, data);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glGetIntegerv)(GLenum pname, GLint * data);
void glGetIntegerv(GLenum pname, GLint * data) {
	_ptrc_glGetIntegerv (pname, data);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glGetLightfv)(GLenum light, GLenum pname, GLfloat * params);
void glGetLightfv(GLenum light, GLenum pname, GLfloat * params) {
	_ptrc_glGetLightfv (light, pname, params);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glGetLightiv)(GLenum light, GLenum pname, GLint * params);
void glGetLightiv(GLenum light, GLenum pname, GLint * params) {
	_ptrc_glGetLightiv (light, pname, params);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glGetMapdv)(GLenum target, GLenum query, GLdouble * v);
void glGetMapdv(GLenum target, GLenum query, GLdouble * v) {
	_ptrc_glGetMapdv (target, query, v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glGetMapfv)(GLenum target, GLenum query, GLfloat * v);
void glGetMapfv(GLenum target, GLenum query, GLfloat * v) {
	_ptrc_glGetMapfv (target, query, v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glGetMapiv)(GLenum target, GLenum query, GLint * v);
void glGetMapiv(GLenum target, GLenum query, GLint * v) {
	_ptrc_glGetMapiv (target, query, v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glGetMaterialfv)(GLenum face, GLenum pname, GLfloat * params);
void glGetMaterialfv(GLenum face, GLenum pname, GLfloat * params) {
	_ptrc_glGetMaterialfv (face, pname, params);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glGetMaterialiv)(GLenum face, GLenum pname, GLint * params);
void glGetMaterialiv(GLenum face, GLenum pname, GLint * params) {
	_ptrc_glGetMaterialiv (face, pname, params);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glGetPixelMapfv)(GLenum map, GLfloat * values);
void glGetPixelMapfv(GLenum map, GLfloat * values) {
	_ptrc_glGetPixelMapfv (map, values);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glGetPixelMapuiv)(GLenum map, GLuint * values);
void glGetPixelMapuiv(GLenum map, GLuint * values) {
	_ptrc_glGetPixelMapuiv (map, values);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glGetPixelMapusv)(GLenum map, GLushort * values);
void glGetPixelMapusv(GLenum map, GLushort * values) {
	_ptrc_glGetPixelMapusv (map, values);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glGetPolygonStipple)(GLubyte * mask);
void glGetPolygonStipple(GLubyte * mask) {
	_ptrc_glGetPolygonStipple (mask);
}
extern const GLubyte * (CODEGEN_FUNCPTR *_ptrc_glGetString)(GLenum name);
const GLubyte * glGetString(GLenum name) {
	return _ptrc_glGetString (name);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glGetTexEnvfv)(GLenum target, GLenum pname, GLfloat * params);
void glGetTexEnvfv(GLenum target, GLenum pname, GLfloat * params) {
	_ptrc_glGetTexEnvfv (target, pname, params);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glGetTexEnviv)(GLenum target, GLenum pname, GLint * params);
void glGetTexEnviv(GLenum target, GLenum pname, GLint * params) {
	_ptrc_glGetTexEnviv (target, pname, params);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glGetTexGendv)(GLenum coord, GLenum pname, GLdouble * params);
void glGetTexGendv(GLenum coord, GLenum pname, GLdouble * params) {
	_ptrc_glGetTexGendv (coord, pname, params);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glGetTexGenfv)(GLenum coord, GLenum pname, GLfloat * params);
void glGetTexGenfv(GLenum coord, GLenum pname, GLfloat * params) {
	_ptrc_glGetTexGenfv (coord, pname, params);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glGetTexGeniv)(GLenum coord, GLenum pname, GLint * params);
void glGetTexGeniv(GLenum coord, GLenum pname, GLint * params) {
	_ptrc_glGetTexGeniv (coord, pname, params);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glGetTexImage)(GLenum target, GLint level, GLenum format, GLenum type, void * pixels);
void glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, void * pixels) {
	_ptrc_glGetTexImage (target, level, format, type, pixels);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glGetTexLevelParameterfv)(GLenum target, GLint level, GLenum pname, GLfloat * params);
void glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat * params) {
	_ptrc_glGetTexLevelParameterfv (target, level, pname, params);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glGetTexLevelParameteriv)(GLenum target, GLint level, GLenum pname, GLint * params);
void glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint * params) {
	_ptrc_glGetTexLevelParameteriv (target, level, pname, params);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glGetTexParameterfv)(GLenum target, GLenum pname, GLfloat * params);
void glGetTexParameterfv(GLenum target, GLenum pname, GLfloat * params) {
	_ptrc_glGetTexParameterfv (target, pname, params);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glGetTexParameteriv)(GLenum target, GLenum pname, GLint * params);
void glGetTexParameteriv(GLenum target, GLenum pname, GLint * params) {
	_ptrc_glGetTexParameteriv (target, pname, params);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glHint)(GLenum target, GLenum mode);
void glHint(GLenum target, GLenum mode) {
	_ptrc_glHint (target, mode);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glIndexMask)(GLuint mask);
void glIndexMask(GLuint mask) {
	_ptrc_glIndexMask (mask);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glIndexd)(GLdouble c);
void glIndexd(GLdouble c) {
	_ptrc_glIndexd (c);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glIndexdv)(const GLdouble * c);
void glIndexdv(const GLdouble * c) {
	_ptrc_glIndexdv (c);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glIndexf)(GLfloat c);
void glIndexf(GLfloat c) {
	_ptrc_glIndexf (c);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glIndexfv)(const GLfloat * c);
void glIndexfv(const GLfloat * c) {
	_ptrc_glIndexfv (c);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glIndexi)(GLint c);
void glIndexi(GLint c) {
	_ptrc_glIndexi (c);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glIndexiv)(const GLint * c);
void glIndexiv(const GLint * c) {
	_ptrc_glIndexiv (c);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glIndexs)(GLshort c);
void glIndexs(GLshort c) {
	_ptrc_glIndexs (c);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glIndexsv)(const GLshort * c);
void glIndexsv(const GLshort * c) {
	_ptrc_glIndexsv (c);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glInitNames)(void);
void glInitNames(void) {
	_ptrc_glInitNames ();
}
extern GLboolean (CODEGEN_FUNCPTR *_ptrc_glIsEnabled)(GLenum cap);
GLboolean glIsEnabled(GLenum cap) {
	return _ptrc_glIsEnabled (cap);
}
extern GLboolean (CODEGEN_FUNCPTR *_ptrc_glIsList)(GLuint list);
GLboolean glIsList(GLuint list) {
	return _ptrc_glIsList (list);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glLightModelf)(GLenum pname, GLfloat param);
void glLightModelf(GLenum pname, GLfloat param) {
	_ptrc_glLightModelf (pname, param);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glLightModelfv)(GLenum pname, const GLfloat * params);
void glLightModelfv(GLenum pname, const GLfloat * params) {
	_ptrc_glLightModelfv (pname, params);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glLightModeli)(GLenum pname, GLint param);
void glLightModeli(GLenum pname, GLint param) {
	_ptrc_glLightModeli (pname, param);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glLightModeliv)(GLenum pname, const GLint * params);
void glLightModeliv(GLenum pname, const GLint * params) {
	_ptrc_glLightModeliv (pname, params);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glLightf)(GLenum light, GLenum pname, GLfloat param);
void glLightf(GLenum light, GLenum pname, GLfloat param) {
	_ptrc_glLightf (light, pname, param);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glLightfv)(GLenum light, GLenum pname, const GLfloat * params);
void glLightfv(GLenum light, GLenum pname, const GLfloat * params) {
	_ptrc_glLightfv (light, pname, params);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glLighti)(GLenum light, GLenum pname, GLint param);
void glLighti(GLenum light, GLenum pname, GLint param) {
	_ptrc_glLighti (light, pname, param);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glLightiv)(GLenum light, GLenum pname, const GLint * params);
void glLightiv(GLenum light, GLenum pname, const GLint * params) {
	_ptrc_glLightiv (light, pname, params);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glLineStipple)(GLint factor, GLushort pattern);
void glLineStipple(GLint factor, GLushort pattern) {
	_ptrc_glLineStipple (factor, pattern);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glLineWidth)(GLfloat width);
void glLineWidth(GLfloat width) {
	_ptrc_glLineWidth (width);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glListBase)(GLuint base);
void glListBase(GLuint base) {
	_ptrc_glListBase (base);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glLoadIdentity)(void);
void glLoadIdentity(void) {
	_ptrc_glLoadIdentity ();
}
extern void (CODEGEN_FUNCPTR *_ptrc_glLoadMatrixd)(const GLdouble * m);
void glLoadMatrixd(const GLdouble * m) {
	_ptrc_glLoadMatrixd (m);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glLoadMatrixf)(const GLfloat * m);
void glLoadMatrixf(const GLfloat * m) {
	_ptrc_glLoadMatrixf (m);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glLoadName)(GLuint name);
void glLoadName(GLuint name) {
	_ptrc_glLoadName (name);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glLogicOp)(GLenum opcode);
void glLogicOp(GLenum opcode) {
	_ptrc_glLogicOp (opcode);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glMap1d)(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble * points);
void glMap1d(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble * points) {
	_ptrc_glMap1d (target, u1, u2, stride, order, points);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glMap1f)(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat * points);
void glMap1f(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat * points) {
	_ptrc_glMap1f (target, u1, u2, stride, order, points);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glMap2d)(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble * points);
void glMap2d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble * points) {
	_ptrc_glMap2d (target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glMap2f)(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat * points);
void glMap2f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat * points) {
	_ptrc_glMap2f (target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glMapGrid1d)(GLint un, GLdouble u1, GLdouble u2);
void glMapGrid1d(GLint un, GLdouble u1, GLdouble u2) {
	_ptrc_glMapGrid1d (un, u1, u2);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glMapGrid1f)(GLint un, GLfloat u1, GLfloat u2);
void glMapGrid1f(GLint un, GLfloat u1, GLfloat u2) {
	_ptrc_glMapGrid1f (un, u1, u2);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glMapGrid2d)(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2);
void glMapGrid2d(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2) {
	_ptrc_glMapGrid2d (un, u1, u2, vn, v1, v2);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glMapGrid2f)(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2);
void glMapGrid2f(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2) {
	_ptrc_glMapGrid2f (un, u1, u2, vn, v1, v2);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glMaterialf)(GLenum face, GLenum pname, GLfloat param);
void glMaterialf(GLenum face, GLenum pname, GLfloat param) {
	_ptrc_glMaterialf (face, pname, param);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glMaterialfv)(GLenum face, GLenum pname, const GLfloat * params);
void glMaterialfv(GLenum face, GLenum pname, const GLfloat * params) {
	_ptrc_glMaterialfv (face, pname, params);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glMateriali)(GLenum face, GLenum pname, GLint param);
void glMateriali(GLenum face, GLenum pname, GLint param) {
	_ptrc_glMateriali (face, pname, param);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glMaterialiv)(GLenum face, GLenum pname, const GLint * params);
void glMaterialiv(GLenum face, GLenum pname, const GLint * params) {
	_ptrc_glMaterialiv (face, pname, params);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glMatrixMode)(GLenum mode);
void glMatrixMode(GLenum mode) {
	_ptrc_glMatrixMode (mode);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glMultMatrixd)(const GLdouble * m);
void glMultMatrixd(const GLdouble * m) {
	_ptrc_glMultMatrixd (m);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glMultMatrixf)(const GLfloat * m);
void glMultMatrixf(const GLfloat * m) {
	_ptrc_glMultMatrixf (m);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glNewList)(GLuint list, GLenum mode);
void glNewList(GLuint list, GLenum mode) {
	_ptrc_glNewList (list, mode);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glNormal3b)(GLbyte nx, GLbyte ny, GLbyte nz);
void glNormal3b(GLbyte nx, GLbyte ny, GLbyte nz) {
	_ptrc_glNormal3b (nx, ny, nz);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glNormal3bv)(const GLbyte * v);
void glNormal3bv(const GLbyte * v) {
	_ptrc_glNormal3bv (v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glNormal3d)(GLdouble nx, GLdouble ny, GLdouble nz);
void glNormal3d(GLdouble nx, GLdouble ny, GLdouble nz) {
	_ptrc_glNormal3d (nx, ny, nz);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glNormal3dv)(const GLdouble * v);
void glNormal3dv(const GLdouble * v) {
	_ptrc_glNormal3dv (v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glNormal3f)(GLfloat nx, GLfloat ny, GLfloat nz);
void glNormal3f(GLfloat nx, GLfloat ny, GLfloat nz) {
	_ptrc_glNormal3f (nx, ny, nz);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glNormal3fv)(const GLfloat * v);
void glNormal3fv(const GLfloat * v) {
	_ptrc_glNormal3fv (v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glNormal3i)(GLint nx, GLint ny, GLint nz);
void glNormal3i(GLint nx, GLint ny, GLint nz) {
	_ptrc_glNormal3i (nx, ny, nz);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glNormal3iv)(const GLint * v);
void glNormal3iv(const GLint * v) {
	_ptrc_glNormal3iv (v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glNormal3s)(GLshort nx, GLshort ny, GLshort nz);
void glNormal3s(GLshort nx, GLshort ny, GLshort nz) {
	_ptrc_glNormal3s (nx, ny, nz);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glNormal3sv)(const GLshort * v);
void glNormal3sv(const GLshort * v) {
	_ptrc_glNormal3sv (v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glOrtho)(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
void glOrtho(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) {
	_ptrc_glOrtho (left, right, bottom, top, zNear, zFar);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glPassThrough)(GLfloat token);
void glPassThrough(GLfloat token) {
	_ptrc_glPassThrough (token);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glPixelMapfv)(GLenum map, GLsizei mapsize, const GLfloat * values);
void glPixelMapfv(GLenum map, GLsizei mapsize, const GLfloat * values) {
	_ptrc_glPixelMapfv (map, mapsize, values);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glPixelMapuiv)(GLenum map, GLsizei mapsize, const GLuint * values);
void glPixelMapuiv(GLenum map, GLsizei mapsize, const GLuint * values) {
	_ptrc_glPixelMapuiv (map, mapsize, values);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glPixelMapusv)(GLenum map, GLsizei mapsize, const GLushort * values);
void glPixelMapusv(GLenum map, GLsizei mapsize, const GLushort * values) {
	_ptrc_glPixelMapusv (map, mapsize, values);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glPixelStoref)(GLenum pname, GLfloat param);
void glPixelStoref(GLenum pname, GLfloat param) {
	_ptrc_glPixelStoref (pname, param);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glPixelStorei)(GLenum pname, GLint param);
void glPixelStorei(GLenum pname, GLint param) {
	_ptrc_glPixelStorei (pname, param);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glPixelTransferf)(GLenum pname, GLfloat param);
void glPixelTransferf(GLenum pname, GLfloat param) {
	_ptrc_glPixelTransferf (pname, param);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glPixelTransferi)(GLenum pname, GLint param);
void glPixelTransferi(GLenum pname, GLint param) {
	_ptrc_glPixelTransferi (pname, param);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glPixelZoom)(GLfloat xfactor, GLfloat yfactor);
void glPixelZoom(GLfloat xfactor, GLfloat yfactor) {
	_ptrc_glPixelZoom (xfactor, yfactor);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glPointSize)(GLfloat size);
void glPointSize(GLfloat size) {
	_ptrc_glPointSize (size);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glPolygonMode)(GLenum face, GLenum mode);
void glPolygonMode(GLenum face, GLenum mode) {
	_ptrc_glPolygonMode (face, mode);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glPolygonStipple)(const GLubyte * mask);
void glPolygonStipple(const GLubyte * mask) {
	_ptrc_glPolygonStipple (mask);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glPopAttrib)(void);
void glPopAttrib(void) {
	_ptrc_glPopAttrib ();
}
extern void (CODEGEN_FUNCPTR *_ptrc_glPopMatrix)(void);
void glPopMatrix(void) {
	_ptrc_glPopMatrix ();
}
extern void (CODEGEN_FUNCPTR *_ptrc_glPopName)(void);
void glPopName(void) {
	_ptrc_glPopName ();
}
extern void (CODEGEN_FUNCPTR *_ptrc_glPushAttrib)(GLbitfield mask);
void glPushAttrib(GLbitfield mask) {
	_ptrc_glPushAttrib (mask);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glPushMatrix)(void);
void glPushMatrix(void) {
	_ptrc_glPushMatrix ();
}
extern void (CODEGEN_FUNCPTR *_ptrc_glPushName)(GLuint name);
void glPushName(GLuint name) {
	_ptrc_glPushName (name);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glRasterPos2d)(GLdouble x, GLdouble y);
void glRasterPos2d(GLdouble x, GLdouble y) {
	_ptrc_glRasterPos2d (x, y);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glRasterPos2dv)(const GLdouble * v);
void glRasterPos2dv(const GLdouble * v) {
	_ptrc_glRasterPos2dv (v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glRasterPos2f)(GLfloat x, GLfloat y);
void glRasterPos2f(GLfloat x, GLfloat y) {
	_ptrc_glRasterPos2f (x, y);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glRasterPos2fv)(const GLfloat * v);
void glRasterPos2fv(const GLfloat * v) {
	_ptrc_glRasterPos2fv (v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glRasterPos2i)(GLint x, GLint y);
void glRasterPos2i(GLint x, GLint y) {
	_ptrc_glRasterPos2i (x, y);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glRasterPos2iv)(const GLint * v);
void glRasterPos2iv(const GLint * v) {
	_ptrc_glRasterPos2iv (v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glRasterPos2s)(GLshort x, GLshort y);
void glRasterPos2s(GLshort x, GLshort y) {
	_ptrc_glRasterPos2s (x, y);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glRasterPos2sv)(const GLshort * v);
void glRasterPos2sv(const GLshort * v) {
	_ptrc_glRasterPos2sv (v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glRasterPos3d)(GLdouble x, GLdouble y, GLdouble z);
void glRasterPos3d(GLdouble x, GLdouble y, GLdouble z) {
	_ptrc_glRasterPos3d (x, y, z);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glRasterPos3dv)(const GLdouble * v);
void glRasterPos3dv(const GLdouble * v) {
	_ptrc_glRasterPos3dv (v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glRasterPos3f)(GLfloat x, GLfloat y, GLfloat z);
void glRasterPos3f(GLfloat x, GLfloat y, GLfloat z) {
	_ptrc_glRasterPos3f (x, y, z);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glRasterPos3fv)(const GLfloat * v);
void glRasterPos3fv(const GLfloat * v) {
	_ptrc_glRasterPos3fv (v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glRasterPos3i)(GLint x, GLint y, GLint z);
void glRasterPos3i(GLint x, GLint y, GLint z) {
	_ptrc_glRasterPos3i (x, y, z);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glRasterPos3iv)(const GLint * v);
void glRasterPos3iv(const GLint * v) {
	_ptrc_glRasterPos3iv (v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glRasterPos3s)(GLshort x, GLshort y, GLshort z);
void glRasterPos3s(GLshort x, GLshort y, GLshort z) {
	_ptrc_glRasterPos3s (x, y, z);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glRasterPos3sv)(const GLshort * v);
void glRasterPos3sv(const GLshort * v) {
	_ptrc_glRasterPos3sv (v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glRasterPos4d)(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void glRasterPos4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
	_ptrc_glRasterPos4d (x, y, z, w);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glRasterPos4dv)(const GLdouble * v);
void glRasterPos4dv(const GLdouble * v) {
	_ptrc_glRasterPos4dv (v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glRasterPos4f)(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void glRasterPos4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
	_ptrc_glRasterPos4f (x, y, z, w);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glRasterPos4fv)(const GLfloat * v);
void glRasterPos4fv(const GLfloat * v) {
	_ptrc_glRasterPos4fv (v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glRasterPos4i)(GLint x, GLint y, GLint z, GLint w);
void glRasterPos4i(GLint x, GLint y, GLint z, GLint w) {
	_ptrc_glRasterPos4i (x, y, z, w);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glRasterPos4iv)(const GLint * v);
void glRasterPos4iv(const GLint * v) {
	_ptrc_glRasterPos4iv (v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glRasterPos4s)(GLshort x, GLshort y, GLshort z, GLshort w);
void glRasterPos4s(GLshort x, GLshort y, GLshort z, GLshort w) {
	_ptrc_glRasterPos4s (x, y, z, w);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glRasterPos4sv)(const GLshort * v);
void glRasterPos4sv(const GLshort * v) {
	_ptrc_glRasterPos4sv (v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glReadBuffer)(GLenum src);
void glReadBuffer(GLenum src) {
	_ptrc_glReadBuffer (src);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glReadPixels)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void * pixels);
void glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void * pixels) {
	_ptrc_glReadPixels (x, y, width, height, format, type, pixels);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glRectd)(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2);
void glRectd(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2) {
	_ptrc_glRectd (x1, y1, x2, y2);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glRectdv)(const GLdouble * v1, const GLdouble * v2);
void glRectdv(const GLdouble * v1, const GLdouble * v2) {
	_ptrc_glRectdv (v1, v2);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glRectf)(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2);
void glRectf(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2) {
	_ptrc_glRectf (x1, y1, x2, y2);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glRectfv)(const GLfloat * v1, const GLfloat * v2);
void glRectfv(const GLfloat * v1, const GLfloat * v2) {
	_ptrc_glRectfv (v1, v2);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glRecti)(GLint x1, GLint y1, GLint x2, GLint y2);
void glRecti(GLint x1, GLint y1, GLint x2, GLint y2) {
	_ptrc_glRecti (x1, y1, x2, y2);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glRectiv)(const GLint * v1, const GLint * v2);
void glRectiv(const GLint * v1, const GLint * v2) {
	_ptrc_glRectiv (v1, v2);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glRects)(GLshort x1, GLshort y1, GLshort x2, GLshort y2);
void glRects(GLshort x1, GLshort y1, GLshort x2, GLshort y2) {
	_ptrc_glRects (x1, y1, x2, y2);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glRectsv)(const GLshort * v1, const GLshort * v2);
void glRectsv(const GLshort * v1, const GLshort * v2) {
	_ptrc_glRectsv (v1, v2);
}
extern GLint (CODEGEN_FUNCPTR *_ptrc_glRenderMode)(GLenum mode);
GLint glRenderMode(GLenum mode) {
	return _ptrc_glRenderMode (mode);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glRotated)(GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
void glRotated(GLdouble angle, GLdouble x, GLdouble y, GLdouble z) {
	_ptrc_glRotated (angle, x, y, z);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glRotatef)(GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
void glRotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z) {
	_ptrc_glRotatef (angle, x, y, z);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glScaled)(GLdouble x, GLdouble y, GLdouble z);
void glScaled(GLdouble x, GLdouble y, GLdouble z) {
	_ptrc_glScaled (x, y, z);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glScalef)(GLfloat x, GLfloat y, GLfloat z);
void glScalef(GLfloat x, GLfloat y, GLfloat z) {
	_ptrc_glScalef (x, y, z);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glScissor)(GLint x, GLint y, GLsizei width, GLsizei height);
void glScissor(GLint x, GLint y, GLsizei width, GLsizei height) {
	_ptrc_glScissor (x, y, width, height);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glSelectBuffer)(GLsizei size, GLuint * buffer);
void glSelectBuffer(GLsizei size, GLuint * buffer) {
	_ptrc_glSelectBuffer (size, buffer);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glShadeModel)(GLenum mode);
void glShadeModel(GLenum mode) {
	_ptrc_glShadeModel (mode);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glStencilFunc)(GLenum func, GLint ref, GLuint mask);
void glStencilFunc(GLenum func, GLint ref, GLuint mask) {
	_ptrc_glStencilFunc (func, ref, mask);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glStencilMask)(GLuint mask);
void glStencilMask(GLuint mask) {
	_ptrc_glStencilMask (mask);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glStencilOp)(GLenum fail, GLenum zfail, GLenum zpass);
void glStencilOp(GLenum fail, GLenum zfail, GLenum zpass) {
	_ptrc_glStencilOp (fail, zfail, zpass);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glTexCoord1d)(GLdouble s);
void glTexCoord1d(GLdouble s) {
	_ptrc_glTexCoord1d (s);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glTexCoord1dv)(const GLdouble * v);
void glTexCoord1dv(const GLdouble * v) {
	_ptrc_glTexCoord1dv (v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glTexCoord1f)(GLfloat s);
void glTexCoord1f(GLfloat s) {
	_ptrc_glTexCoord1f (s);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glTexCoord1fv)(const GLfloat * v);
void glTexCoord1fv(const GLfloat * v) {
	_ptrc_glTexCoord1fv (v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glTexCoord1i)(GLint s);
void glTexCoord1i(GLint s) {
	_ptrc_glTexCoord1i (s);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glTexCoord1iv)(const GLint * v);
void glTexCoord1iv(const GLint * v) {
	_ptrc_glTexCoord1iv (v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glTexCoord1s)(GLshort s);
void glTexCoord1s(GLshort s) {
	_ptrc_glTexCoord1s (s);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glTexCoord1sv)(const GLshort * v);
void glTexCoord1sv(const GLshort * v) {
	_ptrc_glTexCoord1sv (v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glTexCoord2d)(GLdouble s, GLdouble t);
void glTexCoord2d(GLdouble s, GLdouble t) {
	_ptrc_glTexCoord2d (s, t);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glTexCoord2dv)(const GLdouble * v);
void glTexCoord2dv(const GLdouble * v) {
	_ptrc_glTexCoord2dv (v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glTexCoord2f)(GLfloat s, GLfloat t);
void glTexCoord2f(GLfloat s, GLfloat t) {
	_ptrc_glTexCoord2f (s, t);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glTexCoord2fv)(const GLfloat * v);
void glTexCoord2fv(const GLfloat * v) {
	_ptrc_glTexCoord2fv (v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glTexCoord2i)(GLint s, GLint t);
void glTexCoord2i(GLint s, GLint t) {
	_ptrc_glTexCoord2i (s, t);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glTexCoord2iv)(const GLint * v);
void glTexCoord2iv(const GLint * v) {
	_ptrc_glTexCoord2iv (v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glTexCoord2s)(GLshort s, GLshort t);
void glTexCoord2s(GLshort s, GLshort t) {
	_ptrc_glTexCoord2s (s, t);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glTexCoord2sv)(const GLshort * v);
void glTexCoord2sv(const GLshort * v) {
	_ptrc_glTexCoord2sv (v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glTexCoord3d)(GLdouble s, GLdouble t, GLdouble r);
void glTexCoord3d(GLdouble s, GLdouble t, GLdouble r) {
	_ptrc_glTexCoord3d (s, t, r);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glTexCoord3dv)(const GLdouble * v);
void glTexCoord3dv(const GLdouble * v) {
	_ptrc_glTexCoord3dv (v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glTexCoord3f)(GLfloat s, GLfloat t, GLfloat r);
void glTexCoord3f(GLfloat s, GLfloat t, GLfloat r) {
	_ptrc_glTexCoord3f (s, t, r);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glTexCoord3fv)(const GLfloat * v);
void glTexCoord3fv(const GLfloat * v) {
	_ptrc_glTexCoord3fv (v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glTexCoord3i)(GLint s, GLint t, GLint r);
void glTexCoord3i(GLint s, GLint t, GLint r) {
	_ptrc_glTexCoord3i (s, t, r);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glTexCoord3iv)(const GLint * v);
void glTexCoord3iv(const GLint * v) {
	_ptrc_glTexCoord3iv (v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glTexCoord3s)(GLshort s, GLshort t, GLshort r);
void glTexCoord3s(GLshort s, GLshort t, GLshort r) {
	_ptrc_glTexCoord3s (s, t, r);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glTexCoord3sv)(const GLshort * v);
void glTexCoord3sv(const GLshort * v) {
	_ptrc_glTexCoord3sv (v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glTexCoord4d)(GLdouble s, GLdouble t, GLdouble r, GLdouble q);
void glTexCoord4d(GLdouble s, GLdouble t, GLdouble r, GLdouble q) {
	_ptrc_glTexCoord4d (s, t, r, q);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glTexCoord4dv)(const GLdouble * v);
void glTexCoord4dv(const GLdouble * v) {
	_ptrc_glTexCoord4dv (v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glTexCoord4f)(GLfloat s, GLfloat t, GLfloat r, GLfloat q);
void glTexCoord4f(GLfloat s, GLfloat t, GLfloat r, GLfloat q) {
	_ptrc_glTexCoord4f (s, t, r, q);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glTexCoord4fv)(const GLfloat * v);
void glTexCoord4fv(const GLfloat * v) {
	_ptrc_glTexCoord4fv (v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glTexCoord4i)(GLint s, GLint t, GLint r, GLint q);
void glTexCoord4i(GLint s, GLint t, GLint r, GLint q) {
	_ptrc_glTexCoord4i (s, t, r, q);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glTexCoord4iv)(const GLint * v);
void glTexCoord4iv(const GLint * v) {
	_ptrc_glTexCoord4iv (v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glTexCoord4s)(GLshort s, GLshort t, GLshort r, GLshort q);
void glTexCoord4s(GLshort s, GLshort t, GLshort r, GLshort q) {
	_ptrc_glTexCoord4s (s, t, r, q);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glTexCoord4sv)(const GLshort * v);
void glTexCoord4sv(const GLshort * v) {
	_ptrc_glTexCoord4sv (v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glTexEnvf)(GLenum target, GLenum pname, GLfloat param);
void glTexEnvf(GLenum target, GLenum pname, GLfloat param) {
	_ptrc_glTexEnvf (target, pname, param);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glTexEnvfv)(GLenum target, GLenum pname, const GLfloat * params);
void glTexEnvfv(GLenum target, GLenum pname, const GLfloat * params) {
	_ptrc_glTexEnvfv (target, pname, params);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glTexEnvi)(GLenum target, GLenum pname, GLint param);
void glTexEnvi(GLenum target, GLenum pname, GLint param) {
	_ptrc_glTexEnvi (target, pname, param);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glTexEnviv)(GLenum target, GLenum pname, const GLint * params);
void glTexEnviv(GLenum target, GLenum pname, const GLint * params) {
	_ptrc_glTexEnviv (target, pname, params);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glTexGend)(GLenum coord, GLenum pname, GLdouble param);
void glTexGend(GLenum coord, GLenum pname, GLdouble param) {
	_ptrc_glTexGend (coord, pname, param);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glTexGendv)(GLenum coord, GLenum pname, const GLdouble * params);
void glTexGendv(GLenum coord, GLenum pname, const GLdouble * params) {
	_ptrc_glTexGendv (coord, pname, params);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glTexGenf)(GLenum coord, GLenum pname, GLfloat param);
void glTexGenf(GLenum coord, GLenum pname, GLfloat param) {
	_ptrc_glTexGenf (coord, pname, param);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glTexGenfv)(GLenum coord, GLenum pname, const GLfloat * params);
void glTexGenfv(GLenum coord, GLenum pname, const GLfloat * params) {
	_ptrc_glTexGenfv (coord, pname, params);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glTexGeni)(GLenum coord, GLenum pname, GLint param);
void glTexGeni(GLenum coord, GLenum pname, GLint param) {
	_ptrc_glTexGeni (coord, pname, param);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glTexGeniv)(GLenum coord, GLenum pname, const GLint * params);
void glTexGeniv(GLenum coord, GLenum pname, const GLint * params) {
	_ptrc_glTexGeniv (coord, pname, params);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glTexImage1D)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void * pixels);
void glTexImage1D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void * pixels) {
	_ptrc_glTexImage1D (target, level, internalformat, width, border, format, type, pixels);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glTexImage2D)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void * pixels);
void glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void * pixels) {
	_ptrc_glTexImage2D (target, level, internalformat, width, height, border, format, type, pixels);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glTexParameterf)(GLenum target, GLenum pname, GLfloat param);
void glTexParameterf(GLenum target, GLenum pname, GLfloat param) {
	_ptrc_glTexParameterf (target, pname, param);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glTexParameterfv)(GLenum target, GLenum pname, const GLfloat * params);
void glTexParameterfv(GLenum target, GLenum pname, const GLfloat * params) {
	_ptrc_glTexParameterfv (target, pname, params);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glTexParameteri)(GLenum target, GLenum pname, GLint param);
void glTexParameteri(GLenum target, GLenum pname, GLint param) {
	_ptrc_glTexParameteri (target, pname, param);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glTexParameteriv)(GLenum target, GLenum pname, const GLint * params);
void glTexParameteriv(GLenum target, GLenum pname, const GLint * params) {
	_ptrc_glTexParameteriv (target, pname, params);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glTranslated)(GLdouble x, GLdouble y, GLdouble z);
void glTranslated(GLdouble x, GLdouble y, GLdouble z) {
	_ptrc_glTranslated (x, y, z);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glTranslatef)(GLfloat x, GLfloat y, GLfloat z);
void glTranslatef(GLfloat x, GLfloat y, GLfloat z) {
	_ptrc_glTranslatef (x, y, z);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glVertex2d)(GLdouble x, GLdouble y);
void glVertex2d(GLdouble x, GLdouble y) {
	_ptrc_glVertex2d (x, y);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glVertex2dv)(const GLdouble * v);
void glVertex2dv(const GLdouble * v) {
	_ptrc_glVertex2dv (v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glVertex2f)(GLfloat x, GLfloat y);
void glVertex2f(GLfloat x, GLfloat y) {
	_ptrc_glVertex2f (x, y);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glVertex2fv)(const GLfloat * v);
void glVertex2fv(const GLfloat * v) {
	_ptrc_glVertex2fv (v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glVertex2i)(GLint x, GLint y);
void glVertex2i(GLint x, GLint y) {
	_ptrc_glVertex2i (x, y);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glVertex2iv)(const GLint * v);
void glVertex2iv(const GLint * v) {
	_ptrc_glVertex2iv (v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glVertex2s)(GLshort x, GLshort y);
void glVertex2s(GLshort x, GLshort y) {
	_ptrc_glVertex2s (x, y);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glVertex2sv)(const GLshort * v);
void glVertex2sv(const GLshort * v) {
	_ptrc_glVertex2sv (v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glVertex3d)(GLdouble x, GLdouble y, GLdouble z);
void glVertex3d(GLdouble x, GLdouble y, GLdouble z) {
	_ptrc_glVertex3d (x, y, z);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glVertex3dv)(const GLdouble * v);
void glVertex3dv(const GLdouble * v) {
	_ptrc_glVertex3dv (v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glVertex3f)(GLfloat x, GLfloat y, GLfloat z);
void glVertex3f(GLfloat x, GLfloat y, GLfloat z) {
	_ptrc_glVertex3f (x, y, z);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glVertex3fv)(const GLfloat * v);
void glVertex3fv(const GLfloat * v) {
	_ptrc_glVertex3fv (v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glVertex3i)(GLint x, GLint y, GLint z);
void glVertex3i(GLint x, GLint y, GLint z) {
	_ptrc_glVertex3i (x, y, z);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glVertex3iv)(const GLint * v);
void glVertex3iv(const GLint * v) {
	_ptrc_glVertex3iv (v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glVertex3s)(GLshort x, GLshort y, GLshort z);
void glVertex3s(GLshort x, GLshort y, GLshort z) {
	_ptrc_glVertex3s (x, y, z);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glVertex3sv)(const GLshort * v);
void glVertex3sv(const GLshort * v) {
	_ptrc_glVertex3sv (v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glVertex4d)(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void glVertex4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
	_ptrc_glVertex4d (x, y, z, w);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glVertex4dv)(const GLdouble * v);
void glVertex4dv(const GLdouble * v) {
	_ptrc_glVertex4dv (v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glVertex4f)(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void glVertex4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
	_ptrc_glVertex4f (x, y, z, w);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glVertex4fv)(const GLfloat * v);
void glVertex4fv(const GLfloat * v) {
	_ptrc_glVertex4fv (v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glVertex4i)(GLint x, GLint y, GLint z, GLint w);
void glVertex4i(GLint x, GLint y, GLint z, GLint w) {
	_ptrc_glVertex4i (x, y, z, w);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glVertex4iv)(const GLint * v);
void glVertex4iv(const GLint * v) {
	_ptrc_glVertex4iv (v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glVertex4s)(GLshort x, GLshort y, GLshort z, GLshort w);
void glVertex4s(GLshort x, GLshort y, GLshort z, GLshort w) {
	_ptrc_glVertex4s (x, y, z, w);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glVertex4sv)(const GLshort * v);
void glVertex4sv(const GLshort * v) {
	_ptrc_glVertex4sv (v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glViewport)(GLint x, GLint y, GLsizei width, GLsizei height);
void glViewport(GLint x, GLint y, GLsizei width, GLsizei height) {
	_ptrc_glViewport (x, y, width, height);
}

extern GLboolean (CODEGEN_FUNCPTR *_ptrc_glAreTexturesResident)(GLsizei n, const GLuint * textures, GLboolean * residences);
GLboolean glAreTexturesResident(GLsizei n, const GLuint * textures, GLboolean * residences) {
	return _ptrc_glAreTexturesResident (n, textures, residences);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glArrayElement)(GLint i);
void glArrayElement(GLint i) {
	_ptrc_glArrayElement (i);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glBindTexture)(GLenum target, GLuint texture);
void glBindTexture(GLenum target, GLuint texture) {
	_ptrc_glBindTexture (target, texture);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glColorPointer)(GLint size, GLenum type, GLsizei stride, const void * pointer);
void glColorPointer(GLint size, GLenum type, GLsizei stride, const void * pointer) {
	_ptrc_glColorPointer (size, type, stride, pointer);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glCopyTexImage1D)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
void glCopyTexImage1D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) {
	_ptrc_glCopyTexImage1D (target, level, internalformat, x, y, width, border);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glCopyTexImage2D)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
void glCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) {
	_ptrc_glCopyTexImage2D (target, level, internalformat, x, y, width, height, border);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glCopyTexSubImage1D)(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
void glCopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) {
	_ptrc_glCopyTexSubImage1D (target, level, xoffset, x, y, width);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glCopyTexSubImage2D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
void glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
	_ptrc_glCopyTexSubImage2D (target, level, xoffset, yoffset, x, y, width, height);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glDeleteTextures)(GLsizei n, const GLuint * textures);
void glDeleteTextures(GLsizei n, const GLuint * textures) {
	_ptrc_glDeleteTextures (n, textures);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glDisableClientState)(GLenum ren_array);
void glDisableClientState(GLenum ren_array) {
	_ptrc_glDisableClientState (ren_array);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glDrawArrays)(GLenum mode, GLint first, GLsizei count);
void glDrawArrays(GLenum mode, GLint first, GLsizei count) {
	_ptrc_glDrawArrays (mode, first, count);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glDrawElements)(GLenum mode, GLsizei count, GLenum type, const void * indices);
void glDrawElements(GLenum mode, GLsizei count, GLenum type, const void * indices) {
	_ptrc_glDrawElements (mode, count, type, indices);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glEdgeFlagPointer)(GLsizei stride, const void * pointer);
void glEdgeFlagPointer(GLsizei stride, const void * pointer) {
	_ptrc_glEdgeFlagPointer (stride, pointer);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glEnableClientState)(GLenum ren_array);
void glEnableClientState(GLenum ren_array) {
	_ptrc_glEnableClientState (ren_array);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glGenTextures)(GLsizei n, GLuint * textures);
void glGenTextures(GLsizei n, GLuint * textures) {
	_ptrc_glGenTextures (n, textures);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glGetPointerv)(GLenum pname, void ** params);
void glGetPointerv(GLenum pname, void ** params) {
	_ptrc_glGetPointerv (pname, params);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glIndexPointer)(GLenum type, GLsizei stride, const void * pointer);
void glIndexPointer(GLenum type, GLsizei stride, const void * pointer) {
	_ptrc_glIndexPointer (type, stride, pointer);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glIndexub)(GLubyte c);
void glIndexub(GLubyte c) {
	_ptrc_glIndexub (c);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glIndexubv)(const GLubyte * c);
void glIndexubv(const GLubyte * c) {
	_ptrc_glIndexubv (c);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glInterleavedArrays)(GLenum format, GLsizei stride, const void * pointer);
void glInterleavedArrays(GLenum format, GLsizei stride, const void * pointer) {
	_ptrc_glInterleavedArrays (format, stride, pointer);
}
extern GLboolean (CODEGEN_FUNCPTR *_ptrc_glIsTexture)(GLuint texture);
GLboolean glIsTexture(GLuint texture) {
	return _ptrc_glIsTexture (texture);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glNormalPointer)(GLenum type, GLsizei stride, const void * pointer);
void glNormalPointer(GLenum type, GLsizei stride, const void * pointer) {
	_ptrc_glNormalPointer (type, stride, pointer);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glPolygonOffset)(GLfloat factor, GLfloat units);
void glPolygonOffset(GLfloat factor, GLfloat units) {
	_ptrc_glPolygonOffset (factor, units);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glPopClientAttrib)(void);
void glPopClientAttrib(void) {
	_ptrc_glPopClientAttrib ();
}
extern void (CODEGEN_FUNCPTR *_ptrc_glPrioritizeTextures)(GLsizei n, const GLuint * textures, const GLfloat * priorities);
void glPrioritizeTextures(GLsizei n, const GLuint * textures, const GLfloat * priorities) {
	_ptrc_glPrioritizeTextures (n, textures, priorities);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glPushClientAttrib)(GLbitfield mask);
void glPushClientAttrib(GLbitfield mask) {
	_ptrc_glPushClientAttrib (mask);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glTexCoordPointer)(GLint size, GLenum type, GLsizei stride, const void * pointer);
void glTexCoordPointer(GLint size, GLenum type, GLsizei stride, const void * pointer) {
	_ptrc_glTexCoordPointer (size, type, stride, pointer);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glTexSubImage1D)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels);
void glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels) {
	_ptrc_glTexSubImage1D (target, level, xoffset, width, format, type, pixels);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glTexSubImage2D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels);
void glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels) {
	_ptrc_glTexSubImage2D (target, level, xoffset, yoffset, width, height, format, type, pixels);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glVertexPointer)(GLint size, GLenum type, GLsizei stride, const void * pointer);
void glVertexPointer(GLint size, GLenum type, GLsizei stride, const void * pointer) {
	_ptrc_glVertexPointer (size, type, stride, pointer);
}

extern void (CODEGEN_FUNCPTR *_ptrc_glCopyTexSubImage3D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
void glCopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
	_ptrc_glCopyTexSubImage3D (target, level, xoffset, yoffset, zoffset, x, y, width, height);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glDrawRangeElements)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices);
void glDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices) {
	_ptrc_glDrawRangeElements (mode, start, end, count, type, indices);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glTexImage3D)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels);
void glTexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels) {
	_ptrc_glTexImage3D (target, level, internalformat, width, height, depth, border, format, type, pixels);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glTexSubImage3D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels);
void glTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels) {
	_ptrc_glTexSubImage3D (target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
}

extern void (CODEGEN_FUNCPTR *_ptrc_glActiveTexture)(GLenum texture);
void glActiveTexture(GLenum texture) {
	_ptrc_glActiveTexture (texture);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glClientActiveTexture)(GLenum texture);
void glClientActiveTexture(GLenum texture) {
	_ptrc_glClientActiveTexture (texture);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glCompressedTexImage1D)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * data);
void glCompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * data) {
	_ptrc_glCompressedTexImage1D (target, level, internalformat, width, border, imageSize, data);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glCompressedTexImage2D)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * data);
void glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * data) {
	_ptrc_glCompressedTexImage2D (target, level, internalformat, width, height, border, imageSize, data);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glCompressedTexImage3D)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * data);
void glCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * data) {
	_ptrc_glCompressedTexImage3D (target, level, internalformat, width, height, depth, border, imageSize, data);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glCompressedTexSubImage1D)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data);
void glCompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data) {
	_ptrc_glCompressedTexSubImage1D (target, level, xoffset, width, format, imageSize, data);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glCompressedTexSubImage2D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data);
void glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data) {
	_ptrc_glCompressedTexSubImage2D (target, level, xoffset, yoffset, width, height, format, imageSize, data);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glCompressedTexSubImage3D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data);
void glCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data) {
	_ptrc_glCompressedTexSubImage3D (target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glGetCompressedTexImage)(GLenum target, GLint level, void * img);
void glGetCompressedTexImage(GLenum target, GLint level, void * img) {
	_ptrc_glGetCompressedTexImage (target, level, img);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glLoadTransposeMatrixd)(const GLdouble * m);
void glLoadTransposeMatrixd(const GLdouble * m) {
	_ptrc_glLoadTransposeMatrixd (m);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glLoadTransposeMatrixf)(const GLfloat * m);
void glLoadTransposeMatrixf(const GLfloat * m) {
	_ptrc_glLoadTransposeMatrixf (m);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glMultTransposeMatrixd)(const GLdouble * m);
void glMultTransposeMatrixd(const GLdouble * m) {
	_ptrc_glMultTransposeMatrixd (m);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glMultTransposeMatrixf)(const GLfloat * m);
void glMultTransposeMatrixf(const GLfloat * m) {
	_ptrc_glMultTransposeMatrixf (m);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glMultiTexCoord1d)(GLenum target, GLdouble s);
void glMultiTexCoord1d(GLenum target, GLdouble s) {
	_ptrc_glMultiTexCoord1d (target, s);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glMultiTexCoord1dv)(GLenum target, const GLdouble * v);
void glMultiTexCoord1dv(GLenum target, const GLdouble * v) {
	_ptrc_glMultiTexCoord1dv (target, v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glMultiTexCoord1f)(GLenum target, GLfloat s);
void glMultiTexCoord1f(GLenum target, GLfloat s) {
	_ptrc_glMultiTexCoord1f (target, s);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glMultiTexCoord1fv)(GLenum target, const GLfloat * v);
void glMultiTexCoord1fv(GLenum target, const GLfloat * v) {
	_ptrc_glMultiTexCoord1fv (target, v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glMultiTexCoord1i)(GLenum target, GLint s);
void glMultiTexCoord1i(GLenum target, GLint s) {
	_ptrc_glMultiTexCoord1i (target, s);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glMultiTexCoord1iv)(GLenum target, const GLint * v);
void glMultiTexCoord1iv(GLenum target, const GLint * v) {
	_ptrc_glMultiTexCoord1iv (target, v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glMultiTexCoord1s)(GLenum target, GLshort s);
void glMultiTexCoord1s(GLenum target, GLshort s) {
	_ptrc_glMultiTexCoord1s (target, s);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glMultiTexCoord1sv)(GLenum target, const GLshort * v);
void glMultiTexCoord1sv(GLenum target, const GLshort * v) {
	_ptrc_glMultiTexCoord1sv (target, v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glMultiTexCoord2d)(GLenum target, GLdouble s, GLdouble t);
void glMultiTexCoord2d(GLenum target, GLdouble s, GLdouble t) {
	_ptrc_glMultiTexCoord2d (target, s, t);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glMultiTexCoord2dv)(GLenum target, const GLdouble * v);
void glMultiTexCoord2dv(GLenum target, const GLdouble * v) {
	_ptrc_glMultiTexCoord2dv (target, v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glMultiTexCoord2f)(GLenum target, GLfloat s, GLfloat t);
void glMultiTexCoord2f(GLenum target, GLfloat s, GLfloat t) {
	_ptrc_glMultiTexCoord2f (target, s, t);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glMultiTexCoord2fv)(GLenum target, const GLfloat * v);
void glMultiTexCoord2fv(GLenum target, const GLfloat * v) {
	_ptrc_glMultiTexCoord2fv (target, v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glMultiTexCoord2i)(GLenum target, GLint s, GLint t);
void glMultiTexCoord2i(GLenum target, GLint s, GLint t) {
	_ptrc_glMultiTexCoord2i (target, s, t);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glMultiTexCoord2iv)(GLenum target, const GLint * v);
void glMultiTexCoord2iv(GLenum target, const GLint * v) {
	_ptrc_glMultiTexCoord2iv (target, v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glMultiTexCoord2s)(GLenum target, GLshort s, GLshort t);
void glMultiTexCoord2s(GLenum target, GLshort s, GLshort t) {
	_ptrc_glMultiTexCoord2s (target, s, t);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glMultiTexCoord2sv)(GLenum target, const GLshort * v);
void glMultiTexCoord2sv(GLenum target, const GLshort * v) {
	_ptrc_glMultiTexCoord2sv (target, v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glMultiTexCoord3d)(GLenum target, GLdouble s, GLdouble t, GLdouble r);
void glMultiTexCoord3d(GLenum target, GLdouble s, GLdouble t, GLdouble r) {
	_ptrc_glMultiTexCoord3d (target, s, t, r);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glMultiTexCoord3dv)(GLenum target, const GLdouble * v);
void glMultiTexCoord3dv(GLenum target, const GLdouble * v) {
	_ptrc_glMultiTexCoord3dv (target, v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glMultiTexCoord3f)(GLenum target, GLfloat s, GLfloat t, GLfloat r);
void glMultiTexCoord3f(GLenum target, GLfloat s, GLfloat t, GLfloat r) {
	_ptrc_glMultiTexCoord3f (target, s, t, r);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glMultiTexCoord3fv)(GLenum target, const GLfloat * v);
void glMultiTexCoord3fv(GLenum target, const GLfloat * v) {
	_ptrc_glMultiTexCoord3fv (target, v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glMultiTexCoord3i)(GLenum target, GLint s, GLint t, GLint r);
void glMultiTexCoord3i(GLenum target, GLint s, GLint t, GLint r) {
	_ptrc_glMultiTexCoord3i (target, s, t, r);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glMultiTexCoord3iv)(GLenum target, const GLint * v);
void glMultiTexCoord3iv(GLenum target, const GLint * v) {
	_ptrc_glMultiTexCoord3iv (target, v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glMultiTexCoord3s)(GLenum target, GLshort s, GLshort t, GLshort r);
void glMultiTexCoord3s(GLenum target, GLshort s, GLshort t, GLshort r) {
	_ptrc_glMultiTexCoord3s (target, s, t, r);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glMultiTexCoord3sv)(GLenum target, const GLshort * v);
void glMultiTexCoord3sv(GLenum target, const GLshort * v) {
	_ptrc_glMultiTexCoord3sv (target, v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glMultiTexCoord4d)(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
void glMultiTexCoord4d(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q) {
	_ptrc_glMultiTexCoord4d (target, s, t, r, q);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glMultiTexCoord4dv)(GLenum target, const GLdouble * v);
void glMultiTexCoord4dv(GLenum target, const GLdouble * v) {
	_ptrc_glMultiTexCoord4dv (target, v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glMultiTexCoord4f)(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
void glMultiTexCoord4f(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q) {
	_ptrc_glMultiTexCoord4f (target, s, t, r, q);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glMultiTexCoord4fv)(GLenum target, const GLfloat * v);
void glMultiTexCoord4fv(GLenum target, const GLfloat * v) {
	_ptrc_glMultiTexCoord4fv (target, v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glMultiTexCoord4i)(GLenum target, GLint s, GLint t, GLint r, GLint q);
void glMultiTexCoord4i(GLenum target, GLint s, GLint t, GLint r, GLint q) {
	_ptrc_glMultiTexCoord4i (target, s, t, r, q);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glMultiTexCoord4iv)(GLenum target, const GLint * v);
void glMultiTexCoord4iv(GLenum target, const GLint * v) {
	_ptrc_glMultiTexCoord4iv (target, v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glMultiTexCoord4s)(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
void glMultiTexCoord4s(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q) {
	_ptrc_glMultiTexCoord4s (target, s, t, r, q);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glMultiTexCoord4sv)(GLenum target, const GLshort * v);
void glMultiTexCoord4sv(GLenum target, const GLshort * v) {
	_ptrc_glMultiTexCoord4sv (target, v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glSampleCoverage)(GLfloat value, GLboolean invert);
void glSampleCoverage(GLfloat value, GLboolean invert) {
	_ptrc_glSampleCoverage (value, invert);
}

extern void (CODEGEN_FUNCPTR *_ptrc_glBlendColor)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
void glBlendColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) {
	_ptrc_glBlendColor (red, green, blue, alpha);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glBlendEquation)(GLenum mode);
void glBlendEquation(GLenum mode) {
	_ptrc_glBlendEquation (mode);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glBlendFuncSeparate)(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
void glBlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha) {
	_ptrc_glBlendFuncSeparate (sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glFogCoordPointer)(GLenum type, GLsizei stride, const void * pointer);
void glFogCoordPointer(GLenum type, GLsizei stride, const void * pointer) {
	_ptrc_glFogCoordPointer (type, stride, pointer);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glFogCoordd)(GLdouble coord);
void glFogCoordd(GLdouble coord) {
	_ptrc_glFogCoordd (coord);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glFogCoorddv)(const GLdouble * coord);
void glFogCoorddv(const GLdouble * coord) {
	_ptrc_glFogCoorddv (coord);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glFogCoordf)(GLfloat coord);
void glFogCoordf(GLfloat coord) {
	_ptrc_glFogCoordf (coord);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glFogCoordfv)(const GLfloat * coord);
void glFogCoordfv(const GLfloat * coord) {
	_ptrc_glFogCoordfv (coord);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glMultiDrawArrays)(GLenum mode, const GLint * first, const GLsizei * count, GLsizei drawcount);
void glMultiDrawArrays(GLenum mode, const GLint * first, const GLsizei * count, GLsizei drawcount) {
	_ptrc_glMultiDrawArrays (mode, first, count, drawcount);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glMultiDrawElements)(GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei drawcount);
void glMultiDrawElements(GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei drawcount) {
	_ptrc_glMultiDrawElements (mode, count, type, indices, drawcount);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glPointParameterf)(GLenum pname, GLfloat param);
void glPointParameterf(GLenum pname, GLfloat param) {
	_ptrc_glPointParameterf (pname, param);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glPointParameterfv)(GLenum pname, const GLfloat * params);
void glPointParameterfv(GLenum pname, const GLfloat * params) {
	_ptrc_glPointParameterfv (pname, params);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glPointParameteri)(GLenum pname, GLint param);
void glPointParameteri(GLenum pname, GLint param) {
	_ptrc_glPointParameteri (pname, param);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glPointParameteriv)(GLenum pname, const GLint * params);
void glPointParameteriv(GLenum pname, const GLint * params) {
	_ptrc_glPointParameteriv (pname, params);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glSecondaryColor3b)(GLbyte red, GLbyte green, GLbyte blue);
void glSecondaryColor3b(GLbyte red, GLbyte green, GLbyte blue) {
	_ptrc_glSecondaryColor3b (red, green, blue);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glSecondaryColor3bv)(const GLbyte * v);
void glSecondaryColor3bv(const GLbyte * v) {
	_ptrc_glSecondaryColor3bv (v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glSecondaryColor3d)(GLdouble red, GLdouble green, GLdouble blue);
void glSecondaryColor3d(GLdouble red, GLdouble green, GLdouble blue) {
	_ptrc_glSecondaryColor3d (red, green, blue);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glSecondaryColor3dv)(const GLdouble * v);
void glSecondaryColor3dv(const GLdouble * v) {
	_ptrc_glSecondaryColor3dv (v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glSecondaryColor3f)(GLfloat red, GLfloat green, GLfloat blue);
void glSecondaryColor3f(GLfloat red, GLfloat green, GLfloat blue) {
	_ptrc_glSecondaryColor3f (red, green, blue);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glSecondaryColor3fv)(const GLfloat * v);
void glSecondaryColor3fv(const GLfloat * v) {
	_ptrc_glSecondaryColor3fv (v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glSecondaryColor3i)(GLint red, GLint green, GLint blue);
void glSecondaryColor3i(GLint red, GLint green, GLint blue) {
	_ptrc_glSecondaryColor3i (red, green, blue);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glSecondaryColor3iv)(const GLint * v);
void glSecondaryColor3iv(const GLint * v) {
	_ptrc_glSecondaryColor3iv (v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glSecondaryColor3s)(GLshort red, GLshort green, GLshort blue);
void glSecondaryColor3s(GLshort red, GLshort green, GLshort blue) {
	_ptrc_glSecondaryColor3s (red, green, blue);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glSecondaryColor3sv)(const GLshort * v);
void glSecondaryColor3sv(const GLshort * v) {
	_ptrc_glSecondaryColor3sv (v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glSecondaryColor3ub)(GLubyte red, GLubyte green, GLubyte blue);
void glSecondaryColor3ub(GLubyte red, GLubyte green, GLubyte blue) {
	_ptrc_glSecondaryColor3ub (red, green, blue);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glSecondaryColor3ubv)(const GLubyte * v);
void glSecondaryColor3ubv(const GLubyte * v) {
	_ptrc_glSecondaryColor3ubv (v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glSecondaryColor3ui)(GLuint red, GLuint green, GLuint blue);
void glSecondaryColor3ui(GLuint red, GLuint green, GLuint blue) {
	_ptrc_glSecondaryColor3ui (red, green, blue);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glSecondaryColor3uiv)(const GLuint * v);
void glSecondaryColor3uiv(const GLuint * v) {
	_ptrc_glSecondaryColor3uiv (v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glSecondaryColor3us)(GLushort red, GLushort green, GLushort blue);
void glSecondaryColor3us(GLushort red, GLushort green, GLushort blue) {
	_ptrc_glSecondaryColor3us (red, green, blue);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glSecondaryColor3usv)(const GLushort * v);
void glSecondaryColor3usv(const GLushort * v) {
	_ptrc_glSecondaryColor3usv (v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glSecondaryColorPointer)(GLint size, GLenum type, GLsizei stride, const void * pointer);
void glSecondaryColorPointer(GLint size, GLenum type, GLsizei stride, const void * pointer) {
	_ptrc_glSecondaryColorPointer (size, type, stride, pointer);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glWindowPos2d)(GLdouble x, GLdouble y);
void glWindowPos2d(GLdouble x, GLdouble y) {
	_ptrc_glWindowPos2d (x, y);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glWindowPos2dv)(const GLdouble * v);
void glWindowPos2dv(const GLdouble * v) {
	_ptrc_glWindowPos2dv (v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glWindowPos2f)(GLfloat x, GLfloat y);
void glWindowPos2f(GLfloat x, GLfloat y) {
	_ptrc_glWindowPos2f (x, y);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glWindowPos2fv)(const GLfloat * v);
void glWindowPos2fv(const GLfloat * v) {
	_ptrc_glWindowPos2fv (v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glWindowPos2i)(GLint x, GLint y);
void glWindowPos2i(GLint x, GLint y) {
	_ptrc_glWindowPos2i (x, y);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glWindowPos2iv)(const GLint * v);
void glWindowPos2iv(const GLint * v) {
	_ptrc_glWindowPos2iv (v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glWindowPos2s)(GLshort x, GLshort y);
void glWindowPos2s(GLshort x, GLshort y) {
	_ptrc_glWindowPos2s (x, y);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glWindowPos2sv)(const GLshort * v);
void glWindowPos2sv(const GLshort * v) {
	_ptrc_glWindowPos2sv (v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glWindowPos3d)(GLdouble x, GLdouble y, GLdouble z);
void glWindowPos3d(GLdouble x, GLdouble y, GLdouble z) {
	_ptrc_glWindowPos3d (x, y, z);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glWindowPos3dv)(const GLdouble * v);
void glWindowPos3dv(const GLdouble * v) {
	_ptrc_glWindowPos3dv (v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glWindowPos3f)(GLfloat x, GLfloat y, GLfloat z);
void glWindowPos3f(GLfloat x, GLfloat y, GLfloat z) {
	_ptrc_glWindowPos3f (x, y, z);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glWindowPos3fv)(const GLfloat * v);
void glWindowPos3fv(const GLfloat * v) {
	_ptrc_glWindowPos3fv (v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glWindowPos3i)(GLint x, GLint y, GLint z);
void glWindowPos3i(GLint x, GLint y, GLint z) {
	_ptrc_glWindowPos3i (x, y, z);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glWindowPos3iv)(const GLint * v);
void glWindowPos3iv(const GLint * v) {
	_ptrc_glWindowPos3iv (v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glWindowPos3s)(GLshort x, GLshort y, GLshort z);
void glWindowPos3s(GLshort x, GLshort y, GLshort z) {
	_ptrc_glWindowPos3s (x, y, z);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glWindowPos3sv)(const GLshort * v);
void glWindowPos3sv(const GLshort * v) {
	_ptrc_glWindowPos3sv (v);
}

extern void (CODEGEN_FUNCPTR *_ptrc_glBeginQuery)(GLenum target, GLuint id);
void glBeginQuery(GLenum target, GLuint id) {
	_ptrc_glBeginQuery (target, id);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glBindBuffer)(GLenum target, GLuint buffer);
void glBindBuffer(GLenum target, GLuint buffer) {
	_ptrc_glBindBuffer (target, buffer);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glBufferData)(GLenum target, GLsizeiptr size, const void * data, GLenum usage);
void glBufferData(GLenum target, GLsizeiptr size, const void * data, GLenum usage) {
	_ptrc_glBufferData (target, size, data, usage);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glBufferSubData)(GLenum target, GLintptr offset, GLsizeiptr size, const void * data);
void glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const void * data) {
	_ptrc_glBufferSubData (target, offset, size, data);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glDeleteBuffers)(GLsizei n, const GLuint * buffers);
void glDeleteBuffers(GLsizei n, const GLuint * buffers) {
	_ptrc_glDeleteBuffers (n, buffers);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glDeleteQueries)(GLsizei n, const GLuint * ids);
void glDeleteQueries(GLsizei n, const GLuint * ids) {
	_ptrc_glDeleteQueries (n, ids);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glEndQuery)(GLenum target);
void glEndQuery(GLenum target) {
	_ptrc_glEndQuery (target);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glGenBuffers)(GLsizei n, GLuint * buffers);
void glGenBuffers(GLsizei n, GLuint * buffers) {
	_ptrc_glGenBuffers (n, buffers);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glGenQueries)(GLsizei n, GLuint * ids);
void glGenQueries(GLsizei n, GLuint * ids) {
	_ptrc_glGenQueries (n, ids);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glGetBufferParameteriv)(GLenum target, GLenum pname, GLint * params);
void glGetBufferParameteriv(GLenum target, GLenum pname, GLint * params) {
	_ptrc_glGetBufferParameteriv (target, pname, params);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glGetBufferPointerv)(GLenum target, GLenum pname, void ** params);
void glGetBufferPointerv(GLenum target, GLenum pname, void ** params) {
	_ptrc_glGetBufferPointerv (target, pname, params);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glGetBufferSubData)(GLenum target, GLintptr offset, GLsizeiptr size, void * data);
void glGetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, void * data) {
	_ptrc_glGetBufferSubData (target, offset, size, data);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glGetQueryObjectiv)(GLuint id, GLenum pname, GLint * params);
void glGetQueryObjectiv(GLuint id, GLenum pname, GLint * params) {
	_ptrc_glGetQueryObjectiv (id, pname, params);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glGetQueryObjectuiv)(GLuint id, GLenum pname, GLuint * params);
void glGetQueryObjectuiv(GLuint id, GLenum pname, GLuint * params) {
	_ptrc_glGetQueryObjectuiv (id, pname, params);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glGetQueryiv)(GLenum target, GLenum pname, GLint * params);
void glGetQueryiv(GLenum target, GLenum pname, GLint * params) {
	_ptrc_glGetQueryiv (target, pname, params);
}
extern GLboolean (CODEGEN_FUNCPTR *_ptrc_glIsBuffer)(GLuint buffer);
GLboolean glIsBuffer(GLuint buffer) {
	return _ptrc_glIsBuffer (buffer);
}
extern GLboolean (CODEGEN_FUNCPTR *_ptrc_glIsQuery)(GLuint id);
GLboolean glIsQuery(GLuint id) {
	return _ptrc_glIsQuery (id);
}
extern void * (CODEGEN_FUNCPTR *_ptrc_glMapBuffer)(GLenum target, GLenum access);
void * glMapBuffer(GLenum target, GLenum access) {
	return _ptrc_glMapBuffer (target, access);
}
extern GLboolean (CODEGEN_FUNCPTR *_ptrc_glUnmapBuffer)(GLenum target);
GLboolean glUnmapBuffer(GLenum target) {
	return _ptrc_glUnmapBuffer (target);
}

extern void (CODEGEN_FUNCPTR *_ptrc_glAttachShader)(GLuint program, GLuint shader);
void glAttachShader(GLuint program, GLuint shader) {
	_ptrc_glAttachShader (program, shader);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glBindAttribLocation)(GLuint program, GLuint index, const GLchar * name);
void glBindAttribLocation(GLuint program, GLuint index, const GLchar * name) {
	_ptrc_glBindAttribLocation (program, index, name);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glBlendEquationSeparate)(GLenum modeRGB, GLenum modeAlpha);
void glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha) {
	_ptrc_glBlendEquationSeparate (modeRGB, modeAlpha);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glCompileShader)(GLuint shader);
void glCompileShader(GLuint shader) {
	_ptrc_glCompileShader (shader);
}
extern GLuint (CODEGEN_FUNCPTR *_ptrc_glCreateProgram)(void);
GLuint glCreateProgram(void) {
	return _ptrc_glCreateProgram ();
}
extern GLuint (CODEGEN_FUNCPTR *_ptrc_glCreateShader)(GLenum type);
GLuint glCreateShader(GLenum type) {
	return _ptrc_glCreateShader (type);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glDeleteProgram)(GLuint program);
void glDeleteProgram(GLuint program) {
	_ptrc_glDeleteProgram (program);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glDeleteShader)(GLuint shader);
void glDeleteShader(GLuint shader) {
	_ptrc_glDeleteShader (shader);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glDetachShader)(GLuint program, GLuint shader);
void glDetachShader(GLuint program, GLuint shader) {
	_ptrc_glDetachShader (program, shader);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glDisableVertexAttribArray)(GLuint index);
void glDisableVertexAttribArray(GLuint index) {
	_ptrc_glDisableVertexAttribArray (index);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glDrawBuffers)(GLsizei n, const GLenum * bufs);
void glDrawBuffers(GLsizei n, const GLenum * bufs) {
	_ptrc_glDrawBuffers (n, bufs);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glEnableVertexAttribArray)(GLuint index);
void glEnableVertexAttribArray(GLuint index) {
	_ptrc_glEnableVertexAttribArray (index);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glGetActiveAttrib)(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name);
void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name) {
	_ptrc_glGetActiveAttrib (program, index, bufSize, length, size, type, name);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glGetActiveUniform)(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name);
void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name) {
	_ptrc_glGetActiveUniform (program, index, bufSize, length, size, type, name);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glGetAttachedShaders)(GLuint program, GLsizei maxCount, GLsizei * count, GLuint * shaders);
void glGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei * count, GLuint * shaders) {
	_ptrc_glGetAttachedShaders (program, maxCount, count, shaders);
}
extern GLint (CODEGEN_FUNCPTR *_ptrc_glGetAttribLocation)(GLuint program, const GLchar * name);
GLint glGetAttribLocation(GLuint program, const GLchar * name) {
	return _ptrc_glGetAttribLocation (program, name);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glGetProgramInfoLog)(GLuint program, GLsizei bufSize, GLsizei * length, GLchar * infoLog);
void glGetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei * length, GLchar * infoLog) {
	_ptrc_glGetProgramInfoLog (program, bufSize, length, infoLog);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glGetProgramiv)(GLuint program, GLenum pname, GLint * params);
void glGetProgramiv(GLuint program, GLenum pname, GLint * params) {
	_ptrc_glGetProgramiv (program, pname, params);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glGetShaderInfoLog)(GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * infoLog);
void glGetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * infoLog) {
	_ptrc_glGetShaderInfoLog (shader, bufSize, length, infoLog);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glGetShaderSource)(GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * source);
void glGetShaderSource(GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * source) {
	_ptrc_glGetShaderSource (shader, bufSize, length, source);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glGetShaderiv)(GLuint shader, GLenum pname, GLint * params);
void glGetShaderiv(GLuint shader, GLenum pname, GLint * params) {
	_ptrc_glGetShaderiv (shader, pname, params);
}
extern GLint (CODEGEN_FUNCPTR *_ptrc_glGetUniformLocation)(GLuint program, const GLchar * name);
GLint glGetUniformLocation(GLuint program, const GLchar * name) {
	return _ptrc_glGetUniformLocation (program, name);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glGetUniformfv)(GLuint program, GLint location, GLfloat * params);
void glGetUniformfv(GLuint program, GLint location, GLfloat * params) {
	_ptrc_glGetUniformfv (program, location, params);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glGetUniformiv)(GLuint program, GLint location, GLint * params);
void glGetUniformiv(GLuint program, GLint location, GLint * params) {
	_ptrc_glGetUniformiv (program, location, params);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glGetVertexAttribPointerv)(GLuint index, GLenum pname, void ** pointer);
void glGetVertexAttribPointerv(GLuint index, GLenum pname, void ** pointer) {
	_ptrc_glGetVertexAttribPointerv (index, pname, pointer);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glGetVertexAttribdv)(GLuint index, GLenum pname, GLdouble * params);
void glGetVertexAttribdv(GLuint index, GLenum pname, GLdouble * params) {
	_ptrc_glGetVertexAttribdv (index, pname, params);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glGetVertexAttribfv)(GLuint index, GLenum pname, GLfloat * params);
void glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat * params) {
	_ptrc_glGetVertexAttribfv (index, pname, params);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glGetVertexAttribiv)(GLuint index, GLenum pname, GLint * params);
void glGetVertexAttribiv(GLuint index, GLenum pname, GLint * params) {
	_ptrc_glGetVertexAttribiv (index, pname, params);
}
extern GLboolean (CODEGEN_FUNCPTR *_ptrc_glIsProgram)(GLuint program);
GLboolean glIsProgram(GLuint program) {
	return _ptrc_glIsProgram (program);
}
extern GLboolean (CODEGEN_FUNCPTR *_ptrc_glIsShader)(GLuint shader);
GLboolean glIsShader(GLuint shader) {
	return _ptrc_glIsShader (shader);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glLinkProgram)(GLuint program);
void glLinkProgram(GLuint program) {
	_ptrc_glLinkProgram (program);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glShaderSource)(GLuint shader, GLsizei count, const GLchar *const* string, const GLint * length);
void glShaderSource(GLuint shader, GLsizei count, const GLchar *const* string, const GLint * length) {
	_ptrc_glShaderSource (shader, count, string, length);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glStencilFuncSeparate)(GLenum face, GLenum func, GLint ref, GLuint mask);
void glStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask) {
	_ptrc_glStencilFuncSeparate (face, func, ref, mask);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glStencilMaskSeparate)(GLenum face, GLuint mask);
void glStencilMaskSeparate(GLenum face, GLuint mask) {
	_ptrc_glStencilMaskSeparate (face, mask);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glStencilOpSeparate)(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
void glStencilOpSeparate(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass) {
	_ptrc_glStencilOpSeparate (face, sfail, dpfail, dppass);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glUniform1f)(GLint location, GLfloat v0);
void glUniform1f(GLint location, GLfloat v0) {
	_ptrc_glUniform1f (location, v0);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glUniform1fv)(GLint location, GLsizei count, const GLfloat * value);
void glUniform1fv(GLint location, GLsizei count, const GLfloat * value) {
	_ptrc_glUniform1fv (location, count, value);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glUniform1i)(GLint location, GLint v0);
void glUniform1i(GLint location, GLint v0) {
	_ptrc_glUniform1i (location, v0);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glUniform1iv)(GLint location, GLsizei count, const GLint * value);
void glUniform1iv(GLint location, GLsizei count, const GLint * value) {
	_ptrc_glUniform1iv (location, count, value);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glUniform2f)(GLint location, GLfloat v0, GLfloat v1);
void glUniform2f(GLint location, GLfloat v0, GLfloat v1) {
	_ptrc_glUniform2f (location, v0, v1);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glUniform2fv)(GLint location, GLsizei count, const GLfloat * value);
void glUniform2fv(GLint location, GLsizei count, const GLfloat * value) {
	_ptrc_glUniform2fv (location, count, value);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glUniform2i)(GLint location, GLint v0, GLint v1);
void glUniform2i(GLint location, GLint v0, GLint v1) {
	_ptrc_glUniform2i (location, v0, v1);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glUniform2iv)(GLint location, GLsizei count, const GLint * value);
void glUniform2iv(GLint location, GLsizei count, const GLint * value) {
	_ptrc_glUniform2iv (location, count, value);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glUniform3f)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
void glUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2) {
	_ptrc_glUniform3f (location, v0, v1, v2);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glUniform3fv)(GLint location, GLsizei count, const GLfloat * value);
void glUniform3fv(GLint location, GLsizei count, const GLfloat * value) {
	_ptrc_glUniform3fv (location, count, value);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glUniform3i)(GLint location, GLint v0, GLint v1, GLint v2);
void glUniform3i(GLint location, GLint v0, GLint v1, GLint v2) {
	_ptrc_glUniform3i (location, v0, v1, v2);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glUniform3iv)(GLint location, GLsizei count, const GLint * value);
void glUniform3iv(GLint location, GLsizei count, const GLint * value) {
	_ptrc_glUniform3iv (location, count, value);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glUniform4f)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
void glUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) {
	_ptrc_glUniform4f (location, v0, v1, v2, v3);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glUniform4fv)(GLint location, GLsizei count, const GLfloat * value);
void glUniform4fv(GLint location, GLsizei count, const GLfloat * value) {
	_ptrc_glUniform4fv (location, count, value);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glUniform4i)(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
void glUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3) {
	_ptrc_glUniform4i (location, v0, v1, v2, v3);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glUniform4iv)(GLint location, GLsizei count, const GLint * value);
void glUniform4iv(GLint location, GLsizei count, const GLint * value) {
	_ptrc_glUniform4iv (location, count, value);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glUniformMatrix2fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
void glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
	_ptrc_glUniformMatrix2fv (location, count, transpose, value);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glUniformMatrix3fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
void glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
	_ptrc_glUniformMatrix3fv (location, count, transpose, value);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glUniformMatrix4fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
void glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
	_ptrc_glUniformMatrix4fv (location, count, transpose, value);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glUseProgram)(GLuint program);
void glUseProgram(GLuint program) {
	_ptrc_glUseProgram (program);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glValidateProgram)(GLuint program);
void glValidateProgram(GLuint program) {
	_ptrc_glValidateProgram (program);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glVertexAttrib1d)(GLuint index, GLdouble x);
void glVertexAttrib1d(GLuint index, GLdouble x) {
	_ptrc_glVertexAttrib1d (index, x);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glVertexAttrib1dv)(GLuint index, const GLdouble * v);
void glVertexAttrib1dv(GLuint index, const GLdouble * v) {
	_ptrc_glVertexAttrib1dv (index, v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glVertexAttrib1f)(GLuint index, GLfloat x);
void glVertexAttrib1f(GLuint index, GLfloat x) {
	_ptrc_glVertexAttrib1f (index, x);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glVertexAttrib1fv)(GLuint index, const GLfloat * v);
void glVertexAttrib1fv(GLuint index, const GLfloat * v) {
	_ptrc_glVertexAttrib1fv (index, v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glVertexAttrib1s)(GLuint index, GLshort x);
void glVertexAttrib1s(GLuint index, GLshort x) {
	_ptrc_glVertexAttrib1s (index, x);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glVertexAttrib1sv)(GLuint index, const GLshort * v);
void glVertexAttrib1sv(GLuint index, const GLshort * v) {
	_ptrc_glVertexAttrib1sv (index, v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glVertexAttrib2d)(GLuint index, GLdouble x, GLdouble y);
void glVertexAttrib2d(GLuint index, GLdouble x, GLdouble y) {
	_ptrc_glVertexAttrib2d (index, x, y);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glVertexAttrib2dv)(GLuint index, const GLdouble * v);
void glVertexAttrib2dv(GLuint index, const GLdouble * v) {
	_ptrc_glVertexAttrib2dv (index, v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glVertexAttrib2f)(GLuint index, GLfloat x, GLfloat y);
void glVertexAttrib2f(GLuint index, GLfloat x, GLfloat y) {
	_ptrc_glVertexAttrib2f (index, x, y);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glVertexAttrib2fv)(GLuint index, const GLfloat * v);
void glVertexAttrib2fv(GLuint index, const GLfloat * v) {
	_ptrc_glVertexAttrib2fv (index, v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glVertexAttrib2s)(GLuint index, GLshort x, GLshort y);
void glVertexAttrib2s(GLuint index, GLshort x, GLshort y) {
	_ptrc_glVertexAttrib2s (index, x, y);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glVertexAttrib2sv)(GLuint index, const GLshort * v);
void glVertexAttrib2sv(GLuint index, const GLshort * v) {
	_ptrc_glVertexAttrib2sv (index, v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glVertexAttrib3d)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
void glVertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z) {
	_ptrc_glVertexAttrib3d (index, x, y, z);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glVertexAttrib3dv)(GLuint index, const GLdouble * v);
void glVertexAttrib3dv(GLuint index, const GLdouble * v) {
	_ptrc_glVertexAttrib3dv (index, v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glVertexAttrib3f)(GLuint index, GLfloat x, GLfloat y, GLfloat z);
void glVertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z) {
	_ptrc_glVertexAttrib3f (index, x, y, z);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glVertexAttrib3fv)(GLuint index, const GLfloat * v);
void glVertexAttrib3fv(GLuint index, const GLfloat * v) {
	_ptrc_glVertexAttrib3fv (index, v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glVertexAttrib3s)(GLuint index, GLshort x, GLshort y, GLshort z);
void glVertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z) {
	_ptrc_glVertexAttrib3s (index, x, y, z);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glVertexAttrib3sv)(GLuint index, const GLshort * v);
void glVertexAttrib3sv(GLuint index, const GLshort * v) {
	_ptrc_glVertexAttrib3sv (index, v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glVertexAttrib4Nbv)(GLuint index, const GLbyte * v);
void glVertexAttrib4Nbv(GLuint index, const GLbyte * v) {
	_ptrc_glVertexAttrib4Nbv (index, v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glVertexAttrib4Niv)(GLuint index, const GLint * v);
void glVertexAttrib4Niv(GLuint index, const GLint * v) {
	_ptrc_glVertexAttrib4Niv (index, v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glVertexAttrib4Nsv)(GLuint index, const GLshort * v);
void glVertexAttrib4Nsv(GLuint index, const GLshort * v) {
	_ptrc_glVertexAttrib4Nsv (index, v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glVertexAttrib4Nub)(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
void glVertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w) {
	_ptrc_glVertexAttrib4Nub (index, x, y, z, w);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glVertexAttrib4Nubv)(GLuint index, const GLubyte * v);
void glVertexAttrib4Nubv(GLuint index, const GLubyte * v) {
	_ptrc_glVertexAttrib4Nubv (index, v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glVertexAttrib4Nuiv)(GLuint index, const GLuint * v);
void glVertexAttrib4Nuiv(GLuint index, const GLuint * v) {
	_ptrc_glVertexAttrib4Nuiv (index, v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glVertexAttrib4Nusv)(GLuint index, const GLushort * v);
void glVertexAttrib4Nusv(GLuint index, const GLushort * v) {
	_ptrc_glVertexAttrib4Nusv (index, v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glVertexAttrib4bv)(GLuint index, const GLbyte * v);
void glVertexAttrib4bv(GLuint index, const GLbyte * v) {
	_ptrc_glVertexAttrib4bv (index, v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glVertexAttrib4d)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void glVertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
	_ptrc_glVertexAttrib4d (index, x, y, z, w);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glVertexAttrib4dv)(GLuint index, const GLdouble * v);
void glVertexAttrib4dv(GLuint index, const GLdouble * v) {
	_ptrc_glVertexAttrib4dv (index, v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glVertexAttrib4f)(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void glVertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
	_ptrc_glVertexAttrib4f (index, x, y, z, w);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glVertexAttrib4fv)(GLuint index, const GLfloat * v);
void glVertexAttrib4fv(GLuint index, const GLfloat * v) {
	_ptrc_glVertexAttrib4fv (index, v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glVertexAttrib4iv)(GLuint index, const GLint * v);
void glVertexAttrib4iv(GLuint index, const GLint * v) {
	_ptrc_glVertexAttrib4iv (index, v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glVertexAttrib4s)(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
void glVertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w) {
	_ptrc_glVertexAttrib4s (index, x, y, z, w);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glVertexAttrib4sv)(GLuint index, const GLshort * v);
void glVertexAttrib4sv(GLuint index, const GLshort * v) {
	_ptrc_glVertexAttrib4sv (index, v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glVertexAttrib4ubv)(GLuint index, const GLubyte * v);
void glVertexAttrib4ubv(GLuint index, const GLubyte * v) {
	_ptrc_glVertexAttrib4ubv (index, v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glVertexAttrib4uiv)(GLuint index, const GLuint * v);
void glVertexAttrib4uiv(GLuint index, const GLuint * v) {
	_ptrc_glVertexAttrib4uiv (index, v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glVertexAttrib4usv)(GLuint index, const GLushort * v);
void glVertexAttrib4usv(GLuint index, const GLushort * v) {
	_ptrc_glVertexAttrib4usv (index, v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glVertexAttribPointer)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void * pointer);
void glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void * pointer) {
	_ptrc_glVertexAttribPointer (index, size, type, normalized, stride, pointer);
}

extern void (CODEGEN_FUNCPTR *_ptrc_glUniformMatrix2x3fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
void glUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
	_ptrc_glUniformMatrix2x3fv (location, count, transpose, value);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glUniformMatrix2x4fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
void glUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
	_ptrc_glUniformMatrix2x4fv (location, count, transpose, value);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glUniformMatrix3x2fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
void glUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
	_ptrc_glUniformMatrix3x2fv (location, count, transpose, value);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glUniformMatrix3x4fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
void glUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
	_ptrc_glUniformMatrix3x4fv (location, count, transpose, value);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glUniformMatrix4x2fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
void glUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
	_ptrc_glUniformMatrix4x2fv (location, count, transpose, value);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glUniformMatrix4x3fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
void glUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
	_ptrc_glUniformMatrix4x3fv (location, count, transpose, value);
}

extern void (CODEGEN_FUNCPTR *_ptrc_glBeginConditionalRender)(GLuint id, GLenum mode);
void glBeginConditionalRender(GLuint id, GLenum mode) {
	_ptrc_glBeginConditionalRender (id, mode);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glBeginTransformFeedback)(GLenum primitiveMode);
void glBeginTransformFeedback(GLenum primitiveMode) {
	_ptrc_glBeginTransformFeedback (primitiveMode);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glBindBufferBase)(GLenum target, GLuint index, GLuint buffer);
void glBindBufferBase(GLenum target, GLuint index, GLuint buffer) {
	_ptrc_glBindBufferBase (target, index, buffer);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glBindBufferRange)(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
void glBindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) {
	_ptrc_glBindBufferRange (target, index, buffer, offset, size);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glBindFragDataLocation)(GLuint program, GLuint color, const GLchar * name);
void glBindFragDataLocation(GLuint program, GLuint color, const GLchar * name) {
	_ptrc_glBindFragDataLocation (program, color, name);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glBindFramebuffer)(GLenum target, GLuint framebuffer);
void glBindFramebuffer(GLenum target, GLuint framebuffer) {
	_ptrc_glBindFramebuffer (target, framebuffer);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glBindRenderbuffer)(GLenum target, GLuint renderbuffer);
void glBindRenderbuffer(GLenum target, GLuint renderbuffer) {
	_ptrc_glBindRenderbuffer (target, renderbuffer);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glBindVertexArray)(GLuint ren_array);
void glBindVertexArray(GLuint ren_array) {
	_ptrc_glBindVertexArray (ren_array);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glBlitFramebuffer)(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
void glBlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) {
	_ptrc_glBlitFramebuffer (srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
}
extern GLenum (CODEGEN_FUNCPTR *_ptrc_glCheckFramebufferStatus)(GLenum target);
GLenum glCheckFramebufferStatus(GLenum target) {
	return _ptrc_glCheckFramebufferStatus (target);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glClampColor)(GLenum target, GLenum clamp);
void glClampColor(GLenum target, GLenum clamp) {
	_ptrc_glClampColor (target, clamp);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glClearBufferfi)(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
void glClearBufferfi(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil) {
	_ptrc_glClearBufferfi (buffer, drawbuffer, depth, stencil);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glClearBufferfv)(GLenum buffer, GLint drawbuffer, const GLfloat * value);
void glClearBufferfv(GLenum buffer, GLint drawbuffer, const GLfloat * value) {
	_ptrc_glClearBufferfv (buffer, drawbuffer, value);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glClearBufferiv)(GLenum buffer, GLint drawbuffer, const GLint * value);
void glClearBufferiv(GLenum buffer, GLint drawbuffer, const GLint * value) {
	_ptrc_glClearBufferiv (buffer, drawbuffer, value);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glClearBufferuiv)(GLenum buffer, GLint drawbuffer, const GLuint * value);
void glClearBufferuiv(GLenum buffer, GLint drawbuffer, const GLuint * value) {
	_ptrc_glClearBufferuiv (buffer, drawbuffer, value);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glColorMaski)(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
void glColorMaski(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a) {
	_ptrc_glColorMaski (index, r, g, b, a);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glDeleteFramebuffers)(GLsizei n, const GLuint * framebuffers);
void glDeleteFramebuffers(GLsizei n, const GLuint * framebuffers) {
	_ptrc_glDeleteFramebuffers (n, framebuffers);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glDeleteRenderbuffers)(GLsizei n, const GLuint * renderbuffers);
void glDeleteRenderbuffers(GLsizei n, const GLuint * renderbuffers) {
	_ptrc_glDeleteRenderbuffers (n, renderbuffers);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glDeleteVertexArrays)(GLsizei n, const GLuint * arrays);
void glDeleteVertexArrays(GLsizei n, const GLuint * arrays) {
	_ptrc_glDeleteVertexArrays (n, arrays);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glDisablei)(GLenum target, GLuint index);
void glDisablei(GLenum target, GLuint index) {
	_ptrc_glDisablei (target, index);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glEnablei)(GLenum target, GLuint index);
void glEnablei(GLenum target, GLuint index) {
	_ptrc_glEnablei (target, index);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glEndConditionalRender)(void);
void glEndConditionalRender(void) {
	_ptrc_glEndConditionalRender ();
}
extern void (CODEGEN_FUNCPTR *_ptrc_glEndTransformFeedback)(void);
void glEndTransformFeedback(void) {
	_ptrc_glEndTransformFeedback ();
}
extern void (CODEGEN_FUNCPTR *_ptrc_glFlushMappedBufferRange)(GLenum target, GLintptr offset, GLsizeiptr length);
void glFlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length) {
	_ptrc_glFlushMappedBufferRange (target, offset, length);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glFramebufferRenderbuffer)(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
void glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) {
	_ptrc_glFramebufferRenderbuffer (target, attachment, renderbuffertarget, renderbuffer);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glFramebufferTexture1D)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
void glFramebufferTexture1D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) {
	_ptrc_glFramebufferTexture1D (target, attachment, textarget, texture, level);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glFramebufferTexture2D)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
void glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) {
	_ptrc_glFramebufferTexture2D (target, attachment, textarget, texture, level);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glFramebufferTexture3D)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
void glFramebufferTexture3D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) {
	_ptrc_glFramebufferTexture3D (target, attachment, textarget, texture, level, zoffset);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glFramebufferTextureLayer)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
void glFramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer) {
	_ptrc_glFramebufferTextureLayer (target, attachment, texture, level, layer);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glGenFramebuffers)(GLsizei n, GLuint * framebuffers);
void glGenFramebuffers(GLsizei n, GLuint * framebuffers) {
	_ptrc_glGenFramebuffers (n, framebuffers);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glGenRenderbuffers)(GLsizei n, GLuint * renderbuffers);
void glGenRenderbuffers(GLsizei n, GLuint * renderbuffers) {
	_ptrc_glGenRenderbuffers (n, renderbuffers);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glGenVertexArrays)(GLsizei n, GLuint * arrays);
void glGenVertexArrays(GLsizei n, GLuint * arrays) {
	_ptrc_glGenVertexArrays (n, arrays);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glGenerateMipmap)(GLenum target);
void glGenerateMipmap(GLenum target) {
	_ptrc_glGenerateMipmap (target);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glGetBooleani_v)(GLenum target, GLuint index, GLboolean * data);
void glGetBooleani_v(GLenum target, GLuint index, GLboolean * data) {
	_ptrc_glGetBooleani_v (target, index, data);
}
extern GLint (CODEGEN_FUNCPTR *_ptrc_glGetFragDataLocation)(GLuint program, const GLchar * name);
GLint glGetFragDataLocation(GLuint program, const GLchar * name) {
	return _ptrc_glGetFragDataLocation (program, name);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glGetFramebufferAttachmentParameteriv)(GLenum target, GLenum attachment, GLenum pname, GLint * params);
void glGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint * params) {
	_ptrc_glGetFramebufferAttachmentParameteriv (target, attachment, pname, params);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glGetIntegeri_v)(GLenum target, GLuint index, GLint * data);
void glGetIntegeri_v(GLenum target, GLuint index, GLint * data) {
	_ptrc_glGetIntegeri_v (target, index, data);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glGetRenderbufferParameteriv)(GLenum target, GLenum pname, GLint * params);
void glGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint * params) {
	_ptrc_glGetRenderbufferParameteriv (target, pname, params);
}
extern const GLubyte * (CODEGEN_FUNCPTR *_ptrc_glGetStringi)(GLenum name, GLuint index);
const GLubyte * glGetStringi(GLenum name, GLuint index) {
	return _ptrc_glGetStringi (name, index);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glGetTexParameterIiv)(GLenum target, GLenum pname, GLint * params);
void glGetTexParameterIiv(GLenum target, GLenum pname, GLint * params) {
	_ptrc_glGetTexParameterIiv (target, pname, params);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glGetTexParameterIuiv)(GLenum target, GLenum pname, GLuint * params);
void glGetTexParameterIuiv(GLenum target, GLenum pname, GLuint * params) {
	_ptrc_glGetTexParameterIuiv (target, pname, params);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glGetTransformFeedbackVarying)(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name);
void glGetTransformFeedbackVarying(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name) {
	_ptrc_glGetTransformFeedbackVarying (program, index, bufSize, length, size, type, name);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glGetUniformuiv)(GLuint program, GLint location, GLuint * params);
void glGetUniformuiv(GLuint program, GLint location, GLuint * params) {
	_ptrc_glGetUniformuiv (program, location, params);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glGetVertexAttribIiv)(GLuint index, GLenum pname, GLint * params);
void glGetVertexAttribIiv(GLuint index, GLenum pname, GLint * params) {
	_ptrc_glGetVertexAttribIiv (index, pname, params);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glGetVertexAttribIuiv)(GLuint index, GLenum pname, GLuint * params);
void glGetVertexAttribIuiv(GLuint index, GLenum pname, GLuint * params) {
	_ptrc_glGetVertexAttribIuiv (index, pname, params);
}
extern GLboolean (CODEGEN_FUNCPTR *_ptrc_glIsEnabledi)(GLenum target, GLuint index);
GLboolean glIsEnabledi(GLenum target, GLuint index) {
	return _ptrc_glIsEnabledi (target, index);
}
extern GLboolean (CODEGEN_FUNCPTR *_ptrc_glIsFramebuffer)(GLuint framebuffer);
GLboolean glIsFramebuffer(GLuint framebuffer) {
	return _ptrc_glIsFramebuffer (framebuffer);
}
extern GLboolean (CODEGEN_FUNCPTR *_ptrc_glIsRenderbuffer)(GLuint renderbuffer);
GLboolean glIsRenderbuffer(GLuint renderbuffer) {
	return _ptrc_glIsRenderbuffer (renderbuffer);
}
extern GLboolean (CODEGEN_FUNCPTR *_ptrc_glIsVertexArray)(GLuint ren_array);
GLboolean glIsVertexArray(GLuint ren_array) {
	return _ptrc_glIsVertexArray (ren_array);
}
extern void * (CODEGEN_FUNCPTR *_ptrc_glMapBufferRange)(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
void * glMapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access) {
	return _ptrc_glMapBufferRange (target, offset, length, access);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glRenderbufferStorage)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
void glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height) {
	_ptrc_glRenderbufferStorage (target, internalformat, width, height);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glRenderbufferStorageMultisample)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
void glRenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) {
	_ptrc_glRenderbufferStorageMultisample (target, samples, internalformat, width, height);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glTexParameterIiv)(GLenum target, GLenum pname, const GLint * params);
void glTexParameterIiv(GLenum target, GLenum pname, const GLint * params) {
	_ptrc_glTexParameterIiv (target, pname, params);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glTexParameterIuiv)(GLenum target, GLenum pname, const GLuint * params);
void glTexParameterIuiv(GLenum target, GLenum pname, const GLuint * params) {
	_ptrc_glTexParameterIuiv (target, pname, params);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glTransformFeedbackVaryings)(GLuint program, GLsizei count, const GLchar *const* varyings, GLenum bufferMode);
void glTransformFeedbackVaryings(GLuint program, GLsizei count, const GLchar *const* varyings, GLenum bufferMode) {
	_ptrc_glTransformFeedbackVaryings (program, count, varyings, bufferMode);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glUniform1ui)(GLint location, GLuint v0);
void glUniform1ui(GLint location, GLuint v0) {
	_ptrc_glUniform1ui (location, v0);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glUniform1uiv)(GLint location, GLsizei count, const GLuint * value);
void glUniform1uiv(GLint location, GLsizei count, const GLuint * value) {
	_ptrc_glUniform1uiv (location, count, value);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glUniform2ui)(GLint location, GLuint v0, GLuint v1);
void glUniform2ui(GLint location, GLuint v0, GLuint v1) {
	_ptrc_glUniform2ui (location, v0, v1);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glUniform2uiv)(GLint location, GLsizei count, const GLuint * value);
void glUniform2uiv(GLint location, GLsizei count, const GLuint * value) {
	_ptrc_glUniform2uiv (location, count, value);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glUniform3ui)(GLint location, GLuint v0, GLuint v1, GLuint v2);
void glUniform3ui(GLint location, GLuint v0, GLuint v1, GLuint v2) {
	_ptrc_glUniform3ui (location, v0, v1, v2);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glUniform3uiv)(GLint location, GLsizei count, const GLuint * value);
void glUniform3uiv(GLint location, GLsizei count, const GLuint * value) {
	_ptrc_glUniform3uiv (location, count, value);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glUniform4ui)(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
void glUniform4ui(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) {
	_ptrc_glUniform4ui (location, v0, v1, v2, v3);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glUniform4uiv)(GLint location, GLsizei count, const GLuint * value);
void glUniform4uiv(GLint location, GLsizei count, const GLuint * value) {
	_ptrc_glUniform4uiv (location, count, value);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glVertexAttribI1i)(GLuint index, GLint x);
void glVertexAttribI1i(GLuint index, GLint x) {
	_ptrc_glVertexAttribI1i (index, x);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glVertexAttribI1iv)(GLuint index, const GLint * v);
void glVertexAttribI1iv(GLuint index, const GLint * v) {
	_ptrc_glVertexAttribI1iv (index, v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glVertexAttribI1ui)(GLuint index, GLuint x);
void glVertexAttribI1ui(GLuint index, GLuint x) {
	_ptrc_glVertexAttribI1ui (index, x);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glVertexAttribI1uiv)(GLuint index, const GLuint * v);
void glVertexAttribI1uiv(GLuint index, const GLuint * v) {
	_ptrc_glVertexAttribI1uiv (index, v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glVertexAttribI2i)(GLuint index, GLint x, GLint y);
void glVertexAttribI2i(GLuint index, GLint x, GLint y) {
	_ptrc_glVertexAttribI2i (index, x, y);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glVertexAttribI2iv)(GLuint index, const GLint * v);
void glVertexAttribI2iv(GLuint index, const GLint * v) {
	_ptrc_glVertexAttribI2iv (index, v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glVertexAttribI2ui)(GLuint index, GLuint x, GLuint y);
void glVertexAttribI2ui(GLuint index, GLuint x, GLuint y) {
	_ptrc_glVertexAttribI2ui (index, x, y);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glVertexAttribI2uiv)(GLuint index, const GLuint * v);
void glVertexAttribI2uiv(GLuint index, const GLuint * v) {
	_ptrc_glVertexAttribI2uiv (index, v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glVertexAttribI3i)(GLuint index, GLint x, GLint y, GLint z);
void glVertexAttribI3i(GLuint index, GLint x, GLint y, GLint z) {
	_ptrc_glVertexAttribI3i (index, x, y, z);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glVertexAttribI3iv)(GLuint index, const GLint * v);
void glVertexAttribI3iv(GLuint index, const GLint * v) {
	_ptrc_glVertexAttribI3iv (index, v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glVertexAttribI3ui)(GLuint index, GLuint x, GLuint y, GLuint z);
void glVertexAttribI3ui(GLuint index, GLuint x, GLuint y, GLuint z) {
	_ptrc_glVertexAttribI3ui (index, x, y, z);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glVertexAttribI3uiv)(GLuint index, const GLuint * v);
void glVertexAttribI3uiv(GLuint index, const GLuint * v) {
	_ptrc_glVertexAttribI3uiv (index, v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glVertexAttribI4bv)(GLuint index, const GLbyte * v);
void glVertexAttribI4bv(GLuint index, const GLbyte * v) {
	_ptrc_glVertexAttribI4bv (index, v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glVertexAttribI4i)(GLuint index, GLint x, GLint y, GLint z, GLint w);
void glVertexAttribI4i(GLuint index, GLint x, GLint y, GLint z, GLint w) {
	_ptrc_glVertexAttribI4i (index, x, y, z, w);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glVertexAttribI4iv)(GLuint index, const GLint * v);
void glVertexAttribI4iv(GLuint index, const GLint * v) {
	_ptrc_glVertexAttribI4iv (index, v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glVertexAttribI4sv)(GLuint index, const GLshort * v);
void glVertexAttribI4sv(GLuint index, const GLshort * v) {
	_ptrc_glVertexAttribI4sv (index, v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glVertexAttribI4ubv)(GLuint index, const GLubyte * v);
void glVertexAttribI4ubv(GLuint index, const GLubyte * v) {
	_ptrc_glVertexAttribI4ubv (index, v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glVertexAttribI4ui)(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
void glVertexAttribI4ui(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) {
	_ptrc_glVertexAttribI4ui (index, x, y, z, w);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glVertexAttribI4uiv)(GLuint index, const GLuint * v);
void glVertexAttribI4uiv(GLuint index, const GLuint * v) {
	_ptrc_glVertexAttribI4uiv (index, v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glVertexAttribI4usv)(GLuint index, const GLushort * v);
void glVertexAttribI4usv(GLuint index, const GLushort * v) {
	_ptrc_glVertexAttribI4usv (index, v);
}
extern void (CODEGEN_FUNCPTR *_ptrc_glVertexAttribIPointer)(GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer);
void glVertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer) {
	_ptrc_glVertexAttribIPointer (index, size, type, stride, pointer);
}

enum ogl_LoadStatus
{
	ogl_LOAD_FAILED = 0,
	ogl_LOAD_SUCCEEDED = 1,
};

int ogl_LoadFunctions();

int ogl_GetMinorVersion(void);
int ogl_GetMajorVersion(void);
int ogl_IsVersionGEQ(int majorVersion, int minorVersion);

#ifdef __cplusplus
}
#endif /*__cplusplus*/

#endif /*POINTER_C_GENERATED_HEADER_OPENGL_H*/
